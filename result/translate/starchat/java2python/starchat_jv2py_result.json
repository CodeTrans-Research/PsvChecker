[
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_STRINGS_WITH_CONSECUTIVE_1S"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SORT_AN_ARRAY_OF_0S_1S_AND_2S"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "TILING_WITH_DOMINOES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_MINIMUM_DIFFERENCE_PAIR"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLUTION"
    },
    {
        "stdout": "#Results: 2, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF_3"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/SUM_MIDDLE_ROW_COLUMN_MATRIX.py\", line 21, in <module>\n    def f_filled ( mat : List [ List [ int ] ], n ) :\nNameError: name 'List' is not defined. Did you mean: 'list'?\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "SUM_MIDDLE_ROW_COLUMN_MATRIX"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FREQUENT_ELEMENT_ARRAY_1"
    },
    {
        "stdout": "#Results: 7, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "COUNT_SORTED_ROWS_MATRIX"
    },
    {
        "stdout": "No such subarray\nNo such subarray\nNo such subarray\nNo such subarray\nNo such subarray\nNo such subarray\nNo such subarray\nNo such subarray\nNo such subarray\nNo such subarray\nNo such subarray\nNo such subarray\nNo such subarray\nNo such subarray\nNo such subarray\nNo such subarray\nNo such subarray\nNo such subarray\nNo such subarray\nNo such subarray\n#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS"
    },
    {
        "stdout": "",
        "stderr": "  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS.py\", line 59\n    if a[j] == b[i - 1] and b[i]\n                                ^\nSyntaxError: expected ':'\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_FOR_FACTORIAL_OF_A_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "EVEN_FIBONACCI_NUMBERS_SUM"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS_ONE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH"
    },
    {
        "stdout": "Sum found between indexes 3 and 4\nSum found between indexes\n3 and 4\nNo subarray found\nNo subarray found\nSum found between indexes 0 and 29\nSum found between indexes\n0 and 29\nSum found between indexes 8 and 10\nSum found between indexes\n8 and 10\nNo subarray found\nNo subarray found\nSum found between indexes 0 and 16\nSum found between indexes\n0 and 16\nSum found between indexes 9 and 9\nSum found between indexes\n9 and 9\nSum found between indexes 0 and 0\nSum found between indexes\n0 and 0\nSum found between indexes 0 and 0\nSum found between indexes\n0 and 0\nSum found between indexes 10 and 13\nSum found between indexes\n10 and 13\n#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_SUBARRAY_WITH_GIVEN_SUM_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "DOUBLE_FACTORIAL_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS"
    },
    {
        "stdout": "#Results: 9, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES"
    },
    {
        "stdout": "#Results: 8, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_FIND_SLOPE_LINE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_THAN_IT_AND_AFTER_WHICH_ALL_ARE_GREATER_THAN_IT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX"
    },
    {
        "stdout": "#Results: 1, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "GCD_ELEMENTS_GIVEN_RANGE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED"
    },
    {
        "stdout": "#Results: 1, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "NTH_NON_FIBONACCI_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "DIVISIBILITY_BY_7"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SWAP_TWO_NIBBLES_BYTE"
    },
    {
        "stdout": "#Results: 9, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT_A_B_C_K_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "STOOGE_SORT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FINDING_POWER_PRIME_NUMBER_P_N"
    },
    {
        "stdout": "#Results: 6, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "K_TH_ELEMENT_TWO_SORTED_ARRAYS"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/SHUFFLE_A_GIVEN_ARRAY.py\", line 48, in <module>\n    if set([filledres,goldres]) <= set([float(\"inf\"),sys.maxsize,2147483647]) or set([filledres,goldres]) <= set([float(\"-inf\"),-sys.maxsize-1,-sys.maxsize,-2147483648]):\nTypeError: unhashable type: 'list'\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "SHUFFLE_A_GIVEN_ARRAY"
    },
    {
        "stdout": "#Results: 9, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHANGE_BITS_CAN_MADE_ONE_FLIP"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SUM_BINOMIAL_COEFFICIENTS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1"
    },
    {
        "stdout": "0 to -1\n0 to -1\n0 to -1\n0 to -1\n9 to 18\n9 to 18\n0 to -1\n0 to -1\n0 to -1\n0 to -1\n0 to -1\n0 to -1\n0 to -1\n0 to -1\n10 to 11\n10 to 11\n7 to 8\n7 to 8\n0 to -1\n0 to -1\n#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SPIRAL_WAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING.py\", line 46, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING.py\", line 21, in f_filled\n    res = int(str[0]) - ord('0')\nValueError: invalid literal for int() with base 10: 'p'\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING"
    },
    {
        "stdout": "",
        "stderr": "loop",
        "state": "Loop",
        "WhyError": "Loop_",
        "filename": "NEXT_POWER_OF_2_2"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "K_TH_PRIME_FACTOR_GIVEN_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN.py\", line 38, in <module>\n    if abs(1 - (0.0000001 + abs(f_gold(*parameters_set))) / (abs(f_filled(*parameters_set)) + 0.0000001)) < 0.001:\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN.py\", line 20, in f_filled\n    AM, GM, HM = (a + b) / 2, math.sqrt(a * b), (GM * GM) / AM\nUnboundLocalError: local variable 'GM' referenced before assignment\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN"
    },
    {
        "stdout": "#Results: 8, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "FIND_MINIMUM_DIFFERENCE_PAIR_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_INTEGER_OVERFLOW_MULTIPLICATION"
    },
    {
        "stdout": "#Results: 3, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "LONGEST_REPEATING_SUBSEQUENCE"
    },
    {
        "stdout": "#Results: 2, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_TRIPLET_SUM_ARRAY_1"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "SUM_SERIES_23_45_67_89_UPTO_N_TERMS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SORT_ARRAY_CONTAIN_1_N_VALUES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1"
    },
    {
        "stdout": "Wrong input\nWrong input\nWrong input\nWrong input\nWrong input\nWrong input\nWrong input\nWrong input\nWrong input\nWrong input\n#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND"
    },
    {
        "stdout": "#Results: 6, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SEARCH_ALMOST_SORTED_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "NTH_PENTAGONAL_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY"
    },
    {
        "stdout": "Process No.\tProcess Size\tBlock no.\n    1 \t\t 8 \t\t 1\n    2 \t\t 11 \t\t Not Allocated\n    3 \t\t 35 \t\t Not Allocated\nProcess No.Process Size     Block no.\n1           8         2\n2           11         Not Allocated\n3           35         Not Allocated\nProcess No.\tProcess Size\tBlock no.\n    1 \t\t -98 \t\t 16\n    2 \t\t 96 \t\t 6\n    3 \t\t -92 \t\t 22\n    4 \t\t -98 \t\t 0\n    5 \t\t -48 \t\t 7\n    6 \t\t -64 \t\t 20\n    7 \t\t 16 \t\t 9\n    8 \t\t -94 \t\t 1\n    9 \t\t -30 \t\t 23\n    10 \t\t 58 \t\t 21\n    11 \t\t 0 \t\t 9\n    12 \t\t 14 \t\t 19\n    13 \t\t -30 \t\t 12\n    14 \t\t -30 \t\t 17\n    15 \t\t 70 \t\t 8\n    16 \t\t -72 \t\t 18\n    17 \t\t 8 \t\t 22\n    18 \t\t -8 \t\t 13\n    19 \t\t 84 \t\t 3\n    20 \t\t -24 \t\t 9\n    21 \t\t -74 \t\t 5\n    22 \t\t 2 \t\t 6\n    23 \t\t -24 \t\t 6\nProcess No.Process Size     Block no.\n1           -98         17\n2           96         7\n3           -92         23\n4           -98         1\n5           -48         8\n6           -64         21\n7           16         10\n8           -94         2\n9           -30         24\n10           58         22\n11           0         10\n12           14         20\n13           -30         13\n14           -30         18\n15           70         9\n16           -72         19\n17           8         23\n18           -8         14\n19           84         4\n20           -24         10\n21           -74         6\n22           2         7\n23           -24         7\nProcess No.\tProcess Size\tBlock no.\n    1 \t\t 0 \t\t 0\nProcess No.Process Size     Block no.\n1           0         1\nProcess No.\tProcess Size\tBlock no.\n    1 \t\t 64 \t\t 5\n    2 \t\t 56 \t\t 14\n    3 \t\t 53 \t\t 8\n    4 \t\t 46 \t\t 16\n    5 \t\t 97 \t\t 20\n    6 \t\t 91 \t\t 4\n    7 \t\t 50 \t\t 0\n    8 \t\t 68 \t\t 19\n    9 \t\t 32 \t\t 9\n    10 \t\t 83 \t\t 10\n    11 \t\t 69 \t\t 6\n    12 \t\t 57 \t\t 17\nProcess No.Process Size     Block no.\n1           64         6\n2           56         15\n3           53         9\n4           46         17\n5           97         21\n6           91         5\n7           50         1\n8           68         20\n9           32         10\n10           83         11\n11           69         7\n12           57         18\nProcess No.\tProcess Size\tBlock no.\n    1 \t\t -88 \t\t 0\n    2 \t\t 44 \t\t Not Allocated\nProcess No.Process Size     Block no.\n1           -88         1\n2           44         Not Allocated\nProcess No.\tProcess Size\tBlock no.\n    1 \t\t 1 \t\t 2\n    2 \t\t 1 \t\t 6\n    3 \t\t 0 \t\t 0\n    4 \t\t 0 \t\t 0\n    5 \t\t 1 \t\t 8\n    6 \t\t 1 \t\t 11\n    7 \t\t 1 \t\t 12\n    8 \t\t 0 \t\t 0\n    9 \t\t 1 \t\t 15\n    10 \t\t 1 \t\t 16\n    11 \t\t 1 \t\t 17\n    12 \t\t 1 \t\t 19\n    13 \t\t 1 \t\t 22\n    14 \t\t 1 \t\t 23\n    15 \t\t 0 \t\t 0\n    16 \t\t 1 \t\t 31\n    17 \t\t 1 \t\t 32\n    18 \t\t 0 \t\t 0\n    19 \t\t 1 \t\t 33\n    20 \t\t 1 \t\t 34\n    21 \t\t 0 \t\t 0\n    22 \t\t 0 \t\t 0\n    23 \t\t 0 \t\t 0\n    24 \t\t 1 \t\t 35\n    25 \t\t 0 \t\t 0\n    26 \t\t 0 \t\t 0\n    27 \t\t 1 \t\t 36\n    28 \t\t 1 \t\t 39\n    29 \t\t 1 \t\t Not Allocated\n    30 \t\t 1 \t\t Not Allocated\n    31 \t\t 0 \t\t 0\n    32 \t\t 1 \t\t Not Allocated\n    33 \t\t 1 \t\t Not Allocated\n    34 \t\t 1 \t\t Not Allocated\n    35 \t\t 0 \t\t 0\n    36 \t\t 0 \t\t 0\nProcess No.Process Size     Block no.\n1           1         3\n2           1         7\n3           0         1\n4           0         1\n5           1         9\n6           1         12\n7           1         13\n8           0         1\n9           1         16\n10           1         17\n11           1         18\n12           1         20\n13           1         23\n14           1         24\n15           0         1\n16           1         32\n17           1         33\n18           0         1\n19           1         34\n20           1         35\n21           0         1\n22           0         1\n23           0         1\n24           1         36\n25           0         1\n26           0         1\n27           1         37\n28           1         40\n29           1         Not Allocated\n30           1         Not Allocated\n31           0         1\n32           1         Not Allocated\n33           1         Not Allocated\n34           1         Not Allocated\n35           0         1\n36           0         1\nProcess No.\tProcess Size\tBlock no.\n    1 \t\t 6 \t\t 4\n    2 \t\t 14 \t\t 9\n    3 \t\t 14 \t\t 10\n    4 \t\t 21 \t\t 12\n    5 \t\t 24 \t\t 14\n    6 \t\t 25 \t\t 15\n    7 \t\t 27 \t\t 16\n    8 \t\t 29 \t\t 18\n    9 \t\t 29 \t\t 19\n    10 \t\t 30 \t\t 20\n    11 \t\t 33 \t\t 21\n    12 \t\t 38 \t\t 22\n    13 \t\t 39 \t\t 23\n    14 \t\t 44 \t\t 24\n    15 \t\t 49 \t\t 25\n    16 \t\t 50 \t\t 26\n    17 \t\t 50 \t\t 27\n    18 \t\t 51 \t\t 28\n    19 \t\t 52 \t\t 29\n    20 \t\t 52 \t\t 30\n    21 \t\t 53 \t\t 31\n    22 \t\t 54 \t\t 32\n    23 \t\t 56 \t\t 33\n    24 \t\t 56 \t\t 34\n    25 \t\t 59 \t\t 35\n    26 \t\t 59 \t\t Not Allocated\n    27 \t\t 63 \t\t Not Allocated\n    28 \t\t 64 \t\t Not Allocated\n    29 \t\t 67 \t\t Not Allocated\n    30 \t\t 68 \t\t Not Allocated\n    31 \t\t 70 \t\t Not Allocated\n    32 \t\t 71 \t\t Not Allocated\n    33 \t\t 71 \t\t Not Allocated\n    34 \t\t 72 \t\t Not Allocated\n    35 \t\t 73 \t\t Not Allocated\n    36 \t\t 73 \t\t Not Allocated\n    37 \t\t 78 \t\t Not Allocated\n    38 \t\t 80 \t\t Not Allocated\n    39 \t\t 83 \t\t Not Allocated\n    40 \t\t 84 \t\t Not Allocated\n    41 \t\t 85 \t\t Not Allocated\n    42 \t\t 87 \t\t Not Allocated\n    43 \t\t 90 \t\t Not Allocated\nProcess No.Process Size     Block no.\n1           6         5\n2           14         10\n3           14         11\n4           21         13\n5           24         15\n6           25         16\n7           27         17\n8           29         19\n9           29         20\n10           30         21\n11           33         22\n12           38         23\n13           39         24\n14           44         25\n15           49         26\n16           50         27\n17           50         28\n18           51         29\n19           52         30\n20           52         31\n21           53         32\n22           54         33\n23           56         34\n24           56         35\n25           59         36\n26           59         Not Allocated\n27           63         Not Allocated\n28           64         Not Allocated\n29           67         Not Allocated\n30           68         Not Allocated\n31           70         Not Allocated\n32           71         Not Allocated\n33           71         Not Allocated\n34           72         Not Allocated\n35           73         Not Allocated\n36           73         Not Allocated\n37           78         Not Allocated\n38           80         Not Allocated\n39           83         Not Allocated\n40           84         Not Allocated\n41           85         Not Allocated\n42           87         Not Allocated\n43           90         Not Allocated\nProcess No.\tProcess Size\tBlock no.\n    1 \t\t 38 \t\t 2\n    2 \t\t 92 \t\t Not Allocated\n    3 \t\t 76 \t\t Not Allocated\nProcess No.Process Size     Block no.\n1           38         3\n2           92         Not Allocated\n3           76         Not Allocated\nProcess No.\tProcess Size\tBlock no.\n    1 \t\t 0 \t\t 0\n    2 \t\t 0 \t\t 0\n    3 \t\t 0 \t\t 0\n    4 \t\t 0 \t\t 0\n    5 \t\t 0 \t\t 0\n    6 \t\t 0 \t\t 0\n    7 \t\t 0 \t\t 0\n    8 \t\t 0 \t\t 0\n    9 \t\t 0 \t\t 0\n    10 \t\t 0 \t\t 0\n    11 \t\t 0 \t\t 0\n    12 \t\t 0 \t\t 0\n    13 \t\t 0 \t\t 0\n    14 \t\t 1 \t\t 14\n    15 \t\t 1 \t\t 15\n    16 \t\t 1 \t\t Not Allocated\n    17 \t\t 1 \t\t Not Allocated\n    18 \t\t 1 \t\t Not Allocated\nProcess No.Process Size     Block no.\n1           0         1\n2           0         1\n3           0         1\n4           0         1\n5           0         1\n6           0         1\n7           0         1\n8           0         1\n9           0         1\n10           0         1\n11           0         1\n12           0         1\n13           0         1\n14           1         15\n15           1         16\n16           1         Not Allocated\n17           1         Not Allocated\n18           1         Not Allocated\nProcess No.\tProcess Size\tBlock no.\n    1 \t\t 53 \t\t 5\n    2 \t\t 65 \t\t 23\n    3 \t\t 91 \t\t 22\n    4 \t\t 70 \t\t 20\n    5 \t\t 65 \t\t 17\n    6 \t\t 77 \t\t 24\n    7 \t\t 70 \t\t 8\n    8 \t\t 52 \t\t 32\n    9 \t\t 89 \t\t 7\n    10 \t\t 39 \t\t 16\n    11 \t\t 22 \t\t 42\n    12 \t\t 76 \t\t 6\n    13 \t\t 95 \t\t 31\n    14 \t\t 98 \t\t 10\n    15 \t\t 85 \t\t 34\n    16 \t\t 11 \t\t 0\n    17 \t\t 27 \t\t 26\n    18 \t\t 43 \t\t 14\n    19 \t\t 39 \t\t 41\n    20 \t\t 56 \t\t 25\n    21 \t\t 44 \t\t 18\n    22 \t\t 53 \t\t 35\n    23 \t\t 63 \t\t 37\n    24 \t\t 86 \t\t Not Allocated\n    25 \t\t 32 \t\t 13\n    26 \t\t 71 \t\t 3\n    27 \t\t 5 \t\t 7\n    28 \t\t 71 \t\t Not Allocated\n    29 \t\t 85 \t\t Not Allocated\n    30 \t\t 80 \t\t Not Allocated\n    31 \t\t 41 \t\t 21\n    32 \t\t 27 \t\t 19\n    33 \t\t 52 \t\t 12\n    34 \t\t 66 \t\t Not Allocated\n    35 \t\t 4 \t\t 4\n    36 \t\t 64 \t\t Not Allocated\n    37 \t\t 99 \t\t Not Allocated\nProcess No.Process Size     Block no.\n1           53         6\n2           65         24\n3           91         23\n4           70         21\n5           65         18\n6           77         25\n7           70         9\n8           52         33\n9           89         8\n10           39         17\n11           22         43\n12           76         7\n13           95         32\n14           98         11\n15           85         35\n16           11         1\n17           27         27\n18           43         15\n19           39         42\n20           56         26\n21           44         19\n22           53         36\n23           63         38\n24           86         Not Allocated\n25           32         14\n26           71         4\n27           5         8\n28           71         Not Allocated\n29           85         Not Allocated\n30           80         Not Allocated\n31           41         22\n32           27         20\n33           52         13\n34           66         Not Allocated\n35           4         5\n36           64         Not Allocated\n37           99         Not Allocated\n#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT"
    },
    {
        "stdout": "",
        "stderr": "  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/SORT_ARRAY_APPLYING_GIVEN_EQUATION.py\", line 79\n    for\n       ^\nSyntaxError: invalid syntax\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "SORT_ARRAY_APPLYING_GIVEN_EQUATION"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS"
    },
    {
        "stdout": "6 7 8 41 34 4 4 5 5 15 43 47 47 40 8 7 96 57 29 48 48 24 17 15 9 6 2 97 87 51 58 34 48 52 27 27 24 24 21 21 18 14 90 78 77 35 52 62 47 56 52 40 34 73 59 59 52 36 36 14 7 95 87 84 83 33 36 52 64 48 64 70 43 36 74 76 71 64 46 41 32 32 24 4 99 97 91 85 83 63 34 43 65 66 54 77 73 43 52 76 78 46 43 38 27 25 24 19 4 4 1 94 83 75 71 52 46 59 56 44 39 33 29 28 27 12 6 80 80 75 72 63 59 56 76 75 70 67 65 60 45 40 24 14 2 92 82 81 76 76 75 70 67 75 71 63 59 59 59 53 51 42 31 19 5 85 83 80 75 71 63 59 59 59 \n7 8 41 34 4 6 15 43 47 47 40 8 7 4 5 57 29 48 48 24 17 15 9 6 2 51 58 34 48 52 27 27 24 24 21 21 18 14 35 52 62 47 56 52 40 34 73 59 59 52 36 36 14 7 33 36 52 64 48 64 70 43 36 74 76 71 64 46 41 32 32 24 4 63 34 43 65 66 54 77 73 43 52 76 78 46 43 38 27 25 24 19 4 4 1 59 56 44 39 33 29 28 27 12 6 76 75 70 67 65 60 45 40 24 14 2 75 71 63 59 59 59 53 51 42 31 19 5 74 41 38 34 33 32 30 29 25 17 8 5 4 \n-28 -94 34 -90 40 80 80 -76 62 -2 82 -90 94 -92 -48 -6 -86 -72 -48 -2 \n-94 -90 40 -28 -2 82 -90 80 80 -48 -6 -86 -72 \n0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 1 1 1 1 1 1 1 1 \n0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 1 1 1 1 1 \n59 77 73 77 78 34 59 21 28 2 81 51 35 27 54 21 20 66 43 53 39 24 47 66 49 11 87 44 29 66 49 11 87 \n77 73 77 78 34 59 2 81 51 35 27 54 21 59 21 66 43 53 39 24 49 11 87 44 29 66 \n-94 -86 -84 -90 -90 -94 -98 -94 -96 -62 -84 -72 -74 -74 -84 -96 90 -74 -62 -54 -66 -74 -78 -84 -90 -92 -98 98 98 -64 -74 -52 -50 -62 -70 -74 -74 -74 -88 -94 -94 -98 88 86 80 -72 -56 -72 -52 -42 -60 -60 -54 -54 -56 -76 -76 -82 -86 -90 -98 96 84 82 76 -62 -70 -52 -60 -48 -42 -48 -46 -48 -50 -68 -68 -76 -78 -84 -86 -90 -92 -98 94 88 84 82 80 -62 -62 -64 -50 -56 -44 -36 -36 -32 -42 -48 -60 -34 -42 -46 -46 -50 -68 -70 -72 -90 -98 98 94 92 88 82 80 -50 -48 -54 -46 -46 -56 -42 -32 -16 -22 -42 -42 -58 -26 -38 -50 -54 -68 -70 -76 -78 -80 -82 -82 -84 94 88 82 72 70 60 60 -36 -50 -48 -46 -44 -42 -48 -38 -32 -8 -18 -38 -40 -56 -18 -24 -40 -50 -56 -56 -58 -60 -64 -78 -80 -88 -88 -96 98 90 86 80 64 62 62 60 -46 -28 -40 -48 -40 -42 -40 -44 -30 -28 -4 -6 -34 -38 -48 -14 -18 -38 -52 -54 -56 -62 -64 -64 -66 -68 -80 -86 -90 -92 -98 92 90 88 84 74 54 46 42 28 -18 -32 -26 -40 -42 -30 -38 -38 -38 -22 -28 -2 -4 -34 -28 -46 -4 -12 -22 -50 -30 -38 -50 -56 -56 -58 -60 -60 -60 -60 -84 -88 -92 -96 88 80 62 60 56 42 32 26 22 22 8 -8 -18 -26 -36 -32 -10 -38 -32 -38 -18 -22 0 -2 -32 -14 -42 10 -4 -20 -50 -28 -16 -26 -28 -32 -40 -42 -44 -52 -60 -64 -78 -86 -90 -94 -96 90 88 78 74 74 66 62 60 60 54 44 -26 12 -6 -12 -24 -34 -16 -6 -22 -16 -28 -16 -20 14 14 -26 2 -40 14 0 -10 -48 -22 -16 12 12 8 8 -20 -24 -36 -50 -56 -60 -66 -70 -80 -86 -86 -98 96 90 86 84 74 74 70 70 62 62 62 54 -24 -22 14 -4 -12 -18 -24 -14 -2 -20 -16 -14 -2 -20 14 16 -18 6 -30 16 0 -10 -48 -12 -6 12 -20 -28 -30 -40 -42 -42 -46 -46 -48 -54 -56 -64 -70 -80 -88 -90 -98 94 86 66 62 62 54 54 44 18 10 8 4 2 14 -20 -20 16 4 -6 10 -20 -6 -2 -12 -8 -14 2 -10 20 16 -14 16 -14 26 12 -2 -32 -4 -4 12 -20 -10 -14 -16 -20 -30 -36 -40 -42 -56 -66 -70 -76 -76 -84 -88 -90 -90 -90 94 80 78 70 66 62 62 60 42 38 36 28 28 16 -4 22 -14 -18 18 10 0 16 -10 14 8 -4 -4 -10 2 -8 24 30 6 18 -8 36 16 2 -32 0 16 18 -20 -8 -12 -12 -22 -28 -34 -38 -42 -50 -54 -56 -58 -66 -78 -80 -86 -88 -90 -92 -98 90 88 76 62 56 48 34 28 26 26 14 14 8 4 -2 4 4 2 -4 -12 -14 -38 -68 -70 -70 -76 -80 -84 -86 -88 -88 -88 -98 -98 98 94 92 86 86 72 62 52 52 50 50 32 30 26 22 16 16 16 12 8 6 0 -2 -4 -6 -10 -18 -28 -46 -50 -60 -70 -76 -90 -90 -96 98 98 90 88 82 78 62 58 58 46 34 30 30 28 28 26 16 30 26 22 18 14 12 -10 -16 -22 -34 -42 -48 -48 -50 -50 -52 -60 -82 -86 -86 -92 92 80 80 74 72 70 70 64 58 58 54 42 40 40 38 30 26 22 \n-86 -84 -90 -90 -94 -94 -62 -84 -72 -74 -74 -84 -96 -98 -94 -74 -62 -54 -66 -74 -78 -84 -90 -92 -98 -64 -74 -52 -50 -62 -70 -74 -74 -74 -88 -94 -94 -98 -72 -56 -72 -52 -42 -60 -60 -54 -54 -56 -76 -76 -82 -86 -90 -98 -62 -70 -52 -60 -48 -42 -48 -46 -48 -50 -68 -68 -76 -78 -84 -86 -90 -92 -98 -62 -62 -64 -50 -56 -44 -36 -36 -32 -42 -48 -60 -34 -42 -46 -46 -50 -68 -70 -72 -90 -98 -50 -48 -54 -46 -46 -56 -42 -32 -16 -22 -42 -42 -58 -26 -38 -50 -54 -68 -70 -76 -78 -80 -82 -82 -84 -36 -50 -48 -46 -44 -42 -48 -38 -32 -8 -18 -38 -40 -56 -18 -24 -40 -50 -56 -56 -58 -60 -64 -78 -80 -88 -88 -96 -46 -28 -40 -48 -40 -42 -40 -44 -30 -28 -4 -6 -34 -38 -48 -14 -18 -38 -52 -54 -56 -62 -64 -64 -66 -68 -80 -86 -90 -92 -98 -18 -32 -26 -40 -42 -30 -38 -38 -38 -22 -28 -2 -4 -34 -28 -46 -4 -12 -22 -50 -30 -38 -50 -56 -56 -58 -60 -60 -60 -60 -84 -88 -92 -96 8 -8 -18 -26 -36 -32 -10 -38 -32 -38 -18 -22 0 -2 -32 -14 -42 10 -4 -20 -50 -28 -16 -26 -28 -32 -40 -42 -44 -52 -60 -64 -78 -86 -90 -94 -96 -26 12 -6 -12 -24 -34 -16 -6 -22 -16 -28 -16 -20 14 14 -26 2 -40 14 0 -10 -48 -22 -16 12 12 8 8 -20 -24 -36 -50 -56 -60 -66 -70 -80 -86 -86 -98 -24 -22 14 -4 -12 -18 -24 -14 -2 -20 -16 -14 -2 -20 14 16 -18 6 -30 16 0 -10 -48 -12 -6 12 -20 -28 -30 -40 -42 -42 -46 -46 -48 -54 -56 -64 -70 -80 -88 -90 -98 14 -20 -20 16 4 -6 10 -20 -6 -2 -12 -8 -14 2 -10 20 16 -14 16 -14 26 12 -2 -32 -4 -4 12 -20 -10 -14 -16 -20 -30 -36 -40 -42 -56 -66 -70 -76 -76 -84 -88 -90 -90 -90 -4 22 -14 -18 18 10 0 16 -10 14 8 -4 -4 -10 2 -8 24 30 6 18 -8 36 16 2 -32 0 16 18 -20 -8 -12 -12 -22 -28 -34 -38 -42 -50 -54 -56 -58 -66 -78 -80 -86 -88 -90 -92 -98 4 4 2 -4 -12 -14 -38 -68 -70 -70 -76 -80 -84 -86 -88 -88 -88 -98 -98 16 16 12 8 6 0 -2 -4 -6 -10 -18 -28 -46 -50 -60 -70 -76 -90 -90 -96 30 26 22 18 14 12 -10 -16 -22 -34 -42 -48 -48 -50 -50 -52 -60 -82 -86 -86 -92 38 36 34 18 12 4 2 -2 -8 -8 -24 -38 -46 -48 -50 -52 -72 -84 -92 -92 -92 -96 \n0 0 0 0 0 0 1 1 0 0 1 1 1 0 1 0 1 1 1 1 0 1 1 0 0 0 1 0 1 1 0 0 1 0 0 0 1 0 1 1 0 1 0 0 0 1 0 0 1 0 1 1 1 1 1 0 0 1 1 0 1 0 1 0 0 1 0 1 1 1 1 1 0 0 1 0 0 0 0 0 0 1 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 1 1 0 0 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 1 0 1 1 1 0 1 1 1 1 0 1 0 0 0 1 0 0 1 0 1 0 0 1 1 0 0 1 0 0 1 0 1 0 0 0 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 0 0 0 1 0 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 0 1 1 1 0 0 0 1 1 1 1 0 1 1 0 1 0 1 0 0 1 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 0 1 0 1 1 0 1 1 0 1 0 1 1 1 1 0 0 0 0 1 0 0 1 0 1 0 1 1 0 1 1 0 1 0 1 0 1 0 1 1 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 1 1 0 0 1 1 0 1 1 1 0 1 0 0 0 0 1 0 1 0 0 1 1 0 1 0 0 0 1 1 0 0 1 0 1 1 0 1 1 0 1 0 0 1 0 1 1 1 1 1 1 1 0 0 0 1 1 0 0 1 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 1 0 0 0 0 1 1 0 0 1 0 1 1 0 1 0 0 1 0 0 1 0 1 0 1 0 0 0 1 1 0 0 1 0 1 0 0 0 1 1 0 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 0 0 1 0 0 0 1 1 0 0 0 1 1 1 1 1 0 1 0 0 0 1 1 0 0 1 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 1 0 0 1 0 1 0 0 1 1 0 1 0 0 1 0 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1 0 1 0 0 1 0 0 1 0 1 1 1 0 0 0 0 1 1 0 0 0 0 1 0 1 1 0 1 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 1 0 1 0 0 1 0 0 0 0 0 1 0 0 1 1 1 1 1 0 0 0 1 0 0 1 1 0 1 1 0 1 0 0 1 1 0 0 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 0 0 0 0 1 0 1 0 0 1 1 1 1 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 0 1 1 1 1 1 0 0 0 0 1 0 1 1 1 0 0 1 1 1 1 0 1 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 1 0 0 1 1 1 0 1 0 1 1 1 1 1 1 0 1 1 0 1 1 0 1 0 0 1 1 1 1 0 0 1 1 1 0 0 0 1 0 1 0 0 0 1 1 1 0 0 0 0 1 1 0 1 1 0 1 1 0 1 0 0 0 1 1 0 0 1 1 0 1 0 1 1 0 0 0 1 0 0 0 1 0 0 0 1 1 0 1 0 0 1 1 1 1 0 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 1 0 1 0 0 0 1 1 1 1 0 1 0 0 1 1 0 0 0 1 1 0 0 0 1 1 0 1 0 1 0 1 0 1 0 0 0 1 1 1 1 1 0 0 0 1 0 1 1 1 1 0 0 0 1 0 0 1 1 0 0 1 1 0 1 0 1 0 0 0 1 0 1 1 1 1 1 0 1 0 1 1 0 1 1 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 1 1 1 0 1 1 0 0 1 1 1 1 1 0 1 1 1 0 0 1 1 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 1 0 0 0 1 0 0 0 0 1 1 1 0 1 0 0 1 1 1 1 0 0 0 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 0 0 1 1 0 1 0 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 0 1 1 0 1 0 0 1 0 1 1 1 0 0 0 0 1 0 0 1 1 1 1 1 0 1 0 0 1 1 0 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 0 0 0 0 0 1 1 1 0 0 1 0 1 1 0 1 0 0 0 1 0 0 0 0 1 0 0 0 1 1 0 0 1 1 0 1 1 1 0 1 1 0 0 0 1 1 1 0 1 0 0 1 0 1 0 0 1 0 1 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 1 0 1 1 1 1 0 0 0 1 0 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 1 0 1 0 0 1 1 1 0 1 0 1 1 1 1 0 1 0 0 0 0 0 1 1 0 1 0 1 0 1 0 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 0 0 1 1 0 1 0 1 0 0 1 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 1 1 0 1 0 1 0 0 1 0 0 1 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 0 1 0 1 1 0 1 0 1 0 0 1 1 1 0 0 0 0 1 1 0 1 0 1 1 0 1 1 0 1 1 1 0 0 0 0 1 1 0 0 0 1 0 1 1 0 1 0 0 0 0 1 0 0 0 1 1 0 1 1 1 0 0 0 1 0 1 0 0 1 1 1 1 0 1 0 0 1 1 1 0 0 0 0 1 0 0 0 1 0 1 1 0 1 0 1 1 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 1 0 1 1 1 1 0 1 0 1 1 0 0 0 0 1 0 1 0 1 1 0 1 0 1 0 0 1 1 1 0 1 1 1 0 1 1 0 1 0 0 0 0 1 1 1 0 1 1 0 0 1 1 0 0 1 0 1 1 0 1 0 1 0 1 0 1 1 0 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 1 1 0 1 0 1 0 1 1 0 1 1 1 0 0 1 1 0 0 0 1 0 1 0 0 1 0 0 1 1 0 0 1 0 0 1 1 0 1 1 1 1 0 1 1 1 0 1 0 1 1 0 0 0 1 0 1 1 1 1 1 0 1 0 0 1 0 0 1 1 1 0 0 1 0 0 1 0 1 1 0 0 0 0 0 0 1 0 0 0 1 1 1 0 1 0 1 1 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 1 0 0 0 1 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 1 1 0 1 1 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 1 0 1 0 1 0 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 0 0 0 1 1 1 0 1 1 1 0 0 0 1 0 0 1 0 1 1 0 0 0 1 0 0 0 0 1 0 0 1 1 1 1 1 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 1 1 0 1 0 0 0 1 0 0 1 0 1 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 1 1 1 1 1 0 1 0 0 1 1 0 1 1 0 0 0 0 1 1 1 0 1 1 1 1 1 1 0 0 0 1 0 1 1 1 1 0 0 0 1 0 0 1 0 0 0 1 1 1 1 1 0 1 0 1 1 0 0 1 0 0 1 1 0 1 1 0 1 0 0 1 1 1 0 0 0 1 1 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 1 0 1 1 0 0 1 0 0 1 1 0 1 1 0 1 0 0 0 0 1 1 1 0 0 1 0 0 1 0 1 0 1 1 1 1 0 0 1 0 0 1 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 1 0 0 1 0 1 0 1 1 1 1 0 1 1 1 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 0 1 1 1 1 1 1 0 1 1 0 0 0 1 1 0 1 0 1 0 0 1 0 0 0 0 1 1 1 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 1 0 1 1 1 1 1 0 0 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0 0 1 1 0 0 1 1 1 0 0 1 1 0 1 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 0 1 1 1 0 1 0 1 1 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 1 1 0 1 1 1 0 1 1 0 1 1 1 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 1 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 1 1 0 1 1 1 0 \n0 0 0 0 0 0 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 0 0 0 1 1 0 0 1 0 0 0 1 0 1 1 0 1 1 0 0 1 0 1 1 1 1 1 0 0 1 1 0 1 1 0 1 1 1 1 1 0 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 1 1 0 0 1 0 1 1 0 0 1 0 0 1 1 0 1 1 1 0 1 1 1 1 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 1 0 0 0 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 0 1 1 1 1 1 0 1 1 1 0 0 0 1 1 1 1 0 1 1 0 1 0 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 1 1 1 1 0 0 0 0 1 0 0 1 0 1 0 1 1 0 1 1 0 1 0 1 0 1 0 1 1 0 0 0 0 1 1 0 1 1 0 0 1 1 0 1 1 1 0 1 0 0 0 0 1 0 1 0 0 1 1 0 1 0 0 0 1 1 0 0 1 1 1 1 1 1 1 1 0 0 0 1 1 0 0 1 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 1 0 0 0 0 1 1 0 0 1 0 1 0 0 0 1 1 0 0 1 0 1 0 0 0 1 1 0 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 0 0 1 0 0 0 1 1 0 0 0 1 1 1 1 1 0 1 1 1 0 0 1 0 0 1 1 1 0 0 1 0 1 0 0 1 1 0 1 0 0 1 0 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1 0 1 1 0 0 0 0 1 0 1 1 0 1 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 1 0 1 0 0 1 0 0 0 0 0 1 0 0 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 0 0 0 0 1 0 1 0 0 1 1 1 1 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 0 1 1 1 0 1 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 1 0 0 1 1 1 0 1 0 1 1 1 1 1 1 0 1 1 0 1 1 0 1 0 0 1 1 1 1 0 0 1 1 1 0 1 1 0 1 1 0 1 0 0 0 1 1 0 0 1 1 0 1 0 1 1 0 0 0 1 0 0 0 1 0 0 0 1 1 0 1 0 0 1 1 1 1 0 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 0 0 0 1 1 1 1 0 1 0 0 1 1 0 0 0 1 1 0 0 0 1 1 0 1 0 1 0 1 0 1 0 0 0 1 1 1 1 1 0 0 0 1 0 1 1 1 1 0 0 0 1 0 0 1 1 0 0 1 1 0 1 0 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 1 1 1 0 1 1 0 0 1 1 1 1 1 0 1 1 1 0 0 1 1 0 0 1 0 1 1 1 1 0 0 0 1 0 0 0 0 1 1 1 0 1 0 0 1 1 1 1 0 0 0 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 0 0 1 1 0 1 0 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 1 0 0 1 0 1 1 1 0 0 0 0 1 0 0 1 1 1 1 1 0 1 0 0 1 1 0 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 0 0 0 0 0 1 1 1 0 0 1 0 1 1 0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 1 0 1 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 1 0 1 1 1 1 0 0 0 1 0 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 1 0 1 0 0 1 1 1 0 1 0 1 1 1 1 0 1 0 0 0 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 0 0 1 1 0 1 0 1 0 0 1 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 1 1 0 1 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 0 1 0 1 1 0 1 0 1 0 0 1 1 1 0 0 0 0 1 1 0 1 0 1 1 0 1 1 0 1 1 1 0 0 0 0 1 1 0 0 0 1 0 1 1 0 1 0 0 0 0 1 0 0 0 1 1 0 1 1 1 0 0 0 1 0 1 1 0 1 1 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 1 0 1 1 1 1 0 1 0 1 1 0 0 0 0 1 0 1 0 1 1 0 1 0 1 0 0 1 1 1 0 1 1 1 0 1 1 0 1 0 0 0 0 1 1 1 1 0 1 1 1 1 0 1 1 0 1 1 1 0 1 0 1 0 1 1 0 1 1 1 0 0 1 1 0 0 0 1 0 1 0 0 1 0 0 1 1 0 0 1 0 0 1 1 0 1 1 1 1 0 1 1 1 0 1 0 1 1 0 0 0 1 0 1 1 1 1 1 0 1 0 0 1 0 0 1 1 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 1 0 0 0 1 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 1 1 0 1 1 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 1 0 1 0 1 1 0 0 1 0 1 1 0 0 0 1 0 0 0 0 1 0 0 1 1 1 1 1 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 1 1 0 1 0 0 0 1 0 0 1 0 1 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 1 1 1 1 1 0 1 0 0 1 1 0 1 1 0 0 0 0 1 1 1 0 1 1 1 1 1 0 0 1 0 0 1 1 0 1 1 0 1 0 0 1 1 1 0 0 0 1 1 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 1 0 1 1 0 0 1 0 0 1 1 0 1 1 0 1 0 0 0 0 1 1 1 0 0 1 0 0 1 0 1 0 1 1 1 1 0 0 1 0 0 1 1 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 0 1 1 1 1 1 1 0 1 1 0 0 0 1 1 0 1 0 1 0 0 1 0 0 0 0 1 1 1 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 1 0 1 1 1 1 1 0 0 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0 0 1 1 0 0 1 1 1 0 1 0 0 0 1 1 1 0 0 0 1 1 1 1 1 0 1 1 1 0 1 1 0 1 1 1 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 1 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 1 1 0 1 1 1 \n11 15 17 11 10 7 4 4 4 27 14 25 7 7 5 1 99 28 28 22 26 50 43 43 40 32 26 97 90 19 31 30 25 30 51 46 42 30 29 21 16 9 92 90 89 45 20 33 33 27 32 51 50 31 29 26 18 13 10 5 5 99 92 90 88 29 52 32 33 38 28 49 55 53 40 45 20 19 18 11 9 7 5 4 96 93 91 88 87 48 43 54 33 35 41 29 50 57 54 44 49 39 38 38 36 33 31 30 22 15 11 90 83 81 78 74 72 45 53 44 55 34 40 41 31 52 61 55 50 51 41 39 35 34 26 22 18 16 10 10 8 3 87 86 86 82 79 71 69 46 47 61 46 56 36 42 46 31 57 61 56 51 60 53 46 59 49 33 25 19 16 14 14 7 6 5 4 97 95 94 84 77 76 74 71 48 51 48 64 53 63 47 43 50 32 65 62 59 52 63 57 51 60 65 64 39 33 30 29 29 11 10 9 9 9 1 91 89 88 77 76 72 72 70 70 59 52 59 55 68 55 65 56 44 51 62 69 67 67 54 66 57 52 61 68 72 \n15 17 11 10 7 11 27 14 25 7 7 5 1 4 4 28 28 22 26 50 43 43 40 32 26 19 31 30 25 30 51 46 42 30 29 21 16 9 45 20 33 33 27 32 51 50 31 29 26 18 13 10 5 5 29 52 32 33 38 28 49 55 53 40 45 20 19 18 11 9 7 5 4 48 43 54 33 35 41 29 50 57 54 44 49 39 38 38 36 33 31 30 22 15 11 45 53 44 55 34 40 41 31 52 61 55 50 51 41 39 35 34 26 22 18 16 10 10 8 3 46 47 61 46 56 36 42 46 31 57 61 56 51 60 53 46 59 49 33 25 19 16 14 14 7 6 5 4 48 51 48 64 53 63 47 43 50 32 65 62 59 52 63 57 51 60 65 64 39 33 30 29 29 11 10 9 9 9 1 59 52 59 55 68 55 65 56 44 51 62 69 67 67 54 66 57 52 61 68 \n68 56 10 38 -6 -94 -54 82 96 52 -28 -86 -26 -82 22 -54 -84 -30 4 -12 -94 76 -16 90 8 12 78 -70 -48 2 88 16 8 -36 -58 76 -50 96 -14 52 48 -6 68 72 -32 32 76 50 -70 34 88 86 -26 16 4 -66 2 -34 -94 18 34 42 -78 24 76 -52 74 38 20 -52 12 12 16 82 96 -6 90 0 -76 -54 2 -94 -42 14 -68 38 96 50 -20 -42 26 -40 -48 -2 -72 74 -66 -34 -52 -2 0 -66 20 -60 2 48 -6 58 74 86 -88 48 -84 58 6 20 -64 -66 -22 -72 -96 60 38 40 -42 42 20 32 -14 94 -6 -46 -8 -74 14 10 -46 -40 28 10 94 -88 12 16 -94 84 -82 -62 96 40 -18 36 4 -26 -18 8 50 24 62 48 42 -82 24 58 8 86 50 8 0 34 96 42 86 96 -32 0 -2 -84 -42 94 -98 -28 52 -26 -18 -94 54 -82 78 -88 36 -96 10 44 -56 -74 -88 -70 -28 -66 4 -16 46 -10 -56 -38 -90 -66 70 64 -46 2 12 48 -66 90 78 72 78 96 62 46 36 -70 34 34 96 40 48 14 -36 -32 -28 -86 -26 74 52 16 -12 -60 34 -32 70 -34 34 4 12 98 32 -90 -94 -54 -64 22 -46 60 -38 -66 14 34 -94 60 96 -8 2 -52 -52 4 12 92 98 -60 -42 46 -76 92 22 60 48 -20 -10 2 44 -34 -74 86 34 -16 -18 -70 -52 92 -56 -16 50 2 -92 -18 -88 -32 -8 -92 88 70 -4 -6 78 60 90 -36 78 98 74 92 -56 -16 50 -52 74 66 42 44 74 4 42 22 70 -44 66 62 -64 86 48 -64 -80 -82 96 -26 36 -52 74 66 98 34 -84 -88 16 80 -32 64 -74 40 -78 -46 56 -18 46 74 -76 -48 68 18 92 66 98 34 -84 -88 16 46 2 98 92 82 88 -74 -84 84 -80 36 -14 40 -96 -34 72 90 56 -38 -64 -62 52 46 2 98 92 82 42 -60 96 -94 32 -68 80 -54 68 92 -26 20 48 -60 -14 96 70 -80 -52 84 -6 82 42 -60 96 -94 32 -68 80 -28 62 -8 78 18 -6 -88 46 -32 28 -10 -58 18 60 -46 90 -32 -50 -38 -20 20 -82 -28 62 -8 78 18 -6 -88 88 44 -42 40 54 40 -34 14 -24 -16 -98 10 76 -12 -66 40 -16 -24 24 30 -22 -88 88 44 -42 40 54 40 -34 14 -24 84 -98 96 96 -36 68 84 -22 6 60 -76 86 -32 78 86 2 -84 4 -32 76 50 6 84 -98 96 96 -36 68 84 -22 6 46 -74 74 46 48 -82 -18 -66 -56 -10 14 46 -2 -26 68 88 -14 32 8 -98 -70 6 46 -74 74 46 48 -82 -18 -66 -56 -10 14 60 -32 -84 4 -76 14 78 36 -22 -42 98 -14 -58 -50 70 -6 18 -74 62 -14 -52 -34 60 -32 -84 4 -76 14 78 36 -22 -42 98 -14 -58 -92 -76 28 84 42 92 -36 -88 4 -72 26 -52 46 72 -4 -60 32 64 0 28 78 20 -92 -76 28 84 42 92 -36 -88 4 -72 26 -52 46 72 -4 98 -52 86 -10 -80 22 22 -32 36 -26 -96 -40 74 32 -88 56 -98 -44 -78 -14 26 58 98 -52 86 -10 -80 22 22 -32 36 -26 -96 -40 74 32 -88 56 -98 \n56 10 38 -6 -94 68 52 -28 -86 -26 -82 22 -54 -54 82 -30 4 -12 -94 76 -16 90 8 12 78 2 88 16 8 -36 -58 76 -50 96 -14 52 48 -6 32 76 50 -70 34 88 86 -26 16 4 -66 2 -34 -94 18 34 -52 74 38 20 -52 12 12 16 82 96 -6 90 0 -76 -54 2 -94 -42 14 -42 26 -40 -48 -2 -72 74 -66 -34 -52 -2 0 -66 20 -60 2 48 -6 58 74 86 -88 -66 -22 -72 -96 60 38 40 -42 42 20 32 -14 94 -6 -46 -8 -74 14 10 -46 -40 28 10 94 -88 40 -18 36 4 -26 -18 8 50 24 62 48 42 -82 24 58 8 86 50 8 0 34 96 42 86 96 -32 0 -2 -94 54 -82 78 -88 36 -96 10 44 -56 -74 -88 -70 -28 -66 4 -16 46 -10 -56 -38 -90 -66 70 64 -46 2 12 48 -66 90 34 96 40 48 14 -36 -32 -28 -86 -26 74 52 16 -12 -60 34 -32 70 -34 34 4 12 98 32 -90 -94 -54 -64 22 -46 60 -38 -66 14 92 98 -60 -42 46 -76 92 22 60 48 -20 -10 2 44 -34 -74 86 34 -16 -18 -70 -52 92 -56 -16 50 2 -92 -18 -88 -32 -8 -92 88 70 -4 -6 -52 74 66 42 44 74 4 42 22 70 -44 66 62 -64 86 48 -64 -80 -82 96 -26 36 -52 74 66 98 34 -84 -88 16 80 -32 64 -74 40 -78 -46 56 -18 46 46 2 98 92 82 88 -74 -84 84 -80 36 -14 40 -96 -34 72 90 56 -38 -64 -62 52 46 2 98 92 82 42 -60 96 -94 32 -68 80 -54 68 92 -26 20 48 -60 -14 96 -28 62 -8 78 18 -6 -88 46 -32 28 -10 -58 18 60 -46 90 -32 -50 -38 -20 20 -82 -28 62 -8 78 18 -6 -88 88 44 -42 40 54 40 -34 14 -24 -16 -98 10 76 -12 -66 40 -16 84 -98 96 96 -36 68 84 -22 6 60 -76 86 -32 78 86 2 -84 4 -32 76 50 6 84 -98 96 96 -36 68 84 -22 6 46 -74 74 46 48 -82 -18 -66 -56 -10 14 46 -2 -26 68 88 -14 32 60 -32 -84 4 -76 14 78 36 -22 -42 98 -14 -58 -50 70 -6 18 -74 62 -92 -76 28 84 42 92 -36 -88 4 -72 26 -52 46 72 -4 -60 32 64 0 28 98 -52 86 -10 -80 22 22 -32 36 -26 -96 -40 74 32 -88 56 -98 -44 -78 -14 26 66 -18 72 -32 -58 36 70 60 -28 -96 -18 60 -48 38 76 2 34 -64 -14 18 8 -68 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 1 0 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 \n92 85 87 73 60 1 93 29 \n85 73 60 92 1 93 \n#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PRINT_MATRIX_SPIRAL_FORM_STARTING_POINT"
    },
    {
        "stdout": "#Results: 1, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION.py\", line 44, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION.py\", line 22, in f_filled\n    for sum, i in zip(accumulate(range(1, n, 2)), count(1)):\nNameError: name 'accumulate' is not defined\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MARKOV_MATRIX"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "AREA_SQUARE_CIRCUMSCRIBED_CIRCLE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "HYPERCUBE_GRAPH"
    },
    {
        "stdout": "#Results: 5, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_CHECK_INPUT_INTEGER_STRING"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "HEXAGONAL_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FRIENDS_PAIRING_PROBLEM_2"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "NEXT_POWER_OF_2_1"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "SUM_TWO_LARGE_NUMBERS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_LARGEST_PRIME_FACTOR_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SUM_PAIRWISE_PRODUCTS"
    },
    {
        "stdout": "#Results: 1, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FRIENDS_PAIRING_PROBLEM"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_ONE_EXTRA_CHARACTER_STRING_1"
    },
    {
        "stdout": "",
        "stderr": "  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER.py\", line 38\n    dp[i][j] = dp[i - 1][j] and (s1[i - 1] == s2[j - 1]) or (dp[i][j - 1] and (s\n                                                                              ^\nSyntaxError: '(' was never closed\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SUM_BINOMIAL_COEFFICIENTS_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_MIRROR_IMAGE_POINT_2_D_PLANE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_SUM_EVEN_FACTORS_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "SUM_SQUARES_BINOMIAL_COEFFICIENTS"
    },
    {
        "stdout": "#Results: 3, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "NON_REPEATING_ELEMENT"
    },
    {
        "stdout": "#Results: 8, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "COUNT_OPERATIONS_MAKE_STRINGAB_FREE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT.py\", line 79, in <module>\n    f_filled(*(filled_function_param[i]))\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT.py\", line 37, in f_filled\n    if wstIdx == -1:\nUnboundLocalError: local variable 'wstIdx' referenced before assignment\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_IN_IT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS"
    },
    {
        "stdout": "number is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\n#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SEARCHING_ARRAY_ADJACENT_DIFFER_K"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE"
    },
    {
        "stdout": "#Results: 6, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON"
    },
    {
        "stdout": "#Results: 8, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "FIND_SUM_ODD_FACTORS_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "BREAK_NUMBER_THREE_PARTS_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY"
    },
    {
        "stdout": "#Results: 6, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX"
    },
    {
        "stdout": "Not Possible\nNot Possible\nNot Possible\nNot Possible\nNot Possible\nNot Possible\nNot Possible\nNot Possible\nNot Possible\nNot Possible\nNot Possible\nNot Possible\nNot Possible\nNot Possible\nNot Possible\nNot Possible\nNot Possible\nNot Possible\n#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1"
    },
    {
        "stdout": "#Results: 6, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SUM_PAIRWISE_PRODUCTS_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SWAP_BITS_IN_A_GIVEN_NUMBER"
    },
    {
        "stdout": "",
        "stderr": "loop",
        "state": "Loop",
        "WhyError": "Loop_",
        "filename": "COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND_SECOND_HALF_BITS_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "ADD_1_TO_A_GIVEN_NUMBER_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_ISOSCELES_TRIANGLE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_AREA_SQUARE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MINIMUM_XOR_VALUE_PAIR_1"
    },
    {
        "stdout": "No Triplet Found\nNo Triplet Found\n-10 38 -28\n-66 68 -2\n-10 68 -58\n-28 86 -58\n-10 38 -28\n-66 68 -2\n-10 68 -58\n-28 86 -58\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\nNo Triplet Found\nNo Triplet Found\n38 -80 42\n14 -54 40\n14 -38 24\n-10 -32 42\n-10 -28 38\n-10 -28 38\n-12 -28 40\n-18 -28 46\n-18 -28 46\n-18 -22 40\n38 -80 42\n14 -54 40\n14 -38 24\n-10 -32 42\n-10 -28 38\n-10 -28 38\n-12 -28 40\n-18 -28 46\n-18 -28 46\n-18 -22 40\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\nNo Triplet Found\nNo Triplet Found\n36 -70 34\n36 20 -56\n36 -70 34\n36 20 -56\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\nNo Triplet Found\nNo Triplet Found\n#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1"
    },
    {
        "stdout": "#Results: 7, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK"
    },
    {
        "stdout": "#Results: 5, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED"
    },
    {
        "stdout": "",
        "stderr": "  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K.py\", line 30\n    return dp[l][r][k] = min(min(cost + f_filled(X, Y, l - 1, r - 1, k - 1, dp), f_filled(X, Y, l - 1, r, k, dp)), f_filled(X, Y, l, r - 1, k, dp))\n                       ^\nSyntaxError: invalid syntax\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K"
    },
    {
        "stdout": "Diagonal one : \n4 \n121 \n9 \n225 \n225 \n144 \n100 \n256 \n1156 \n1225 \n1936 \n1296 \n1444 \n1681 \n2916 \n729 \n2704 \n1156 \n4624 \n5329 \n\n\n\n\n\n\n\n\n\n\n\n\n\nDiagonal two : \n3969 \n3025 \n2916 \n2704 \n2025 \n1089 \n841 \n961 \n1600 \n1369 \n1521 \n784 \n484 \n196 \n784 \n121 \n81 \n4 \n64 \n4 \n\n\n\n\n\n\n\n\n\n\n\n\n\nDiagonal one : 4 121 9 225 225 144 100 256 1156 1225 1936 1296 1444 1681 2916 729 2704 1156 4624 5329  \n\nDiagonal two : 3969 3025 2916 2704 2025 1089 841 961 1600 1369 1521 784 484 196 784 121 81 4 64 4 Diagonal one : \n484 \n1764 \n4356 \n576 \n\n\nDiagonal two : \n6724 \n4096 \n9604 \n576 \n\n\nDiagonal one : 484 1764 4356 576  \n\nDiagonal two : 6724 4096 9604 576 Diagonal one : \n0 \n0 \n0 \n0 \n0 \n1 \nDiagonal two : \n1 \n1 \n1 \n1 \n0 \n0 \nDiagonal one : 0 0 0 0 0 1  \n\nDiagonal two : 1 1 1 1 0 0 Diagonal one : \n8281 \n8464 \n2116 \n2704 \n1444 \n2116 \n5476 \n4900 \n8464 \n6889 \n8836 \n25 \n8649 \n1369 \n2704 \n4624 \n1296 \n3844 \n2025 \n9604 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiagonal two : \n36 \n4225 \n9604 \n4761 \n2304 \n1521 \n2916 \n2809 \n4096 \n1296 \n8464 \n81 \n400 \n1156 \n256 \n9025 \n729 \n8649 \n2809 \n1 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiagonal one : 8281 8464 2116 2704 1444 2116 5476 4900 8464 6889 8836 25 8649 1369 2704 4624 1296 3844 2025 9604  \n\nDiagonal two : 36 4225 9604 4761 2304 1521 2916 2809 4096 1296 8464 81 400 1156 256 9025 729 8649 2809 1 Diagonal one : \n9216 \n7396 \n6724 \n4900 \n3136 \n3364 \n1936 \n3600 \n2304 \n36 \n1296 \n576 \n0 \n0 \n36 \n\n\n\n\n\n\n\n\n\n\n\nDiagonal two : \n324 \n676 \n784 \n4 \n324 \n400 \n324 \n3600 \n2704 \n1444 \n6084 \n8100 \n5184 \n7056 \n9216 \n\n\n\n\n\n\n\n\n\n\n\nDiagonal one : 9216 7396 6724 4900 3136 3364 1936 3600 2304 36 1296 576 0 0 36  \n\nDiagonal two : 324 676 784 4 324 400 324 3600 2704 1444 6084 8100 5184 7056 9216 Diagonal one : \n1 \n1 \nDiagonal two : \n1 \n0 \nDiagonal one : 1 1  \n\nDiagonal two : 1 0 Diagonal one : \n49 \n81 \n36 \n441 \n1369 \n961 \n729 \n1296 \n2500 \n2704 \n2500 \n1089 \nDiagonal two : \n6400 \n4900 \n3481 \n4356 \n4489 \n4624 \n4356 \n1936 \n2916 \n2401 \n1444 \n400 \nDiagonal one : 49 81 36 441 1369 961 729 1296 2500 2704 2500 1089  \n\nDiagonal two : 6400 4900 3481 4356 4489 4624 4356 1936 2916 2401 1444 400 Diagonal one : \n7056 \n7396 \n4096 \n8464 \n324 \n36 \n2704 \n4624 \n3364 \n6400 \n900 \n8836 \n256 \n1444 \n576 \n1936 \n3600 \n36 \n4356 \n4900 \n6724 \n1600 \n4356 \n7056 \n1296 \n2116 \n1600 \n4096 \nDiagonal two : \n400 \n6724 \n9604 \n4624 \n784 \n3136 \n3136 \n256 \n400 \n676 \n1764 \n4900 \n6400 \n1444 \n3844 \n1936 \n6400 \n1024 \n64 \n576 \n2304 \n676 \n1024 \n100 \n484 \n900 \n576 \n4096 \nDiagonal one : 7056 7396 4096 8464 324 36 2704 4624 3364 6400 900 8836 256 1444 576 1936 3600 36 4356 4900 6724 1600 4356 7056 1296 2116 1600 4096  \n\nDiagonal two : 400 6724 9604 4624 784 3136 3136 256 400 676 1764 4900 6400 1444 3844 1936 6400 1024 64 576 2304 676 1024 100 484 900 576 4096 Diagonal one : \n0 \n\nDiagonal two : \n0 \n\nDiagonal one : 0  \n\nDiagonal two : 0 Diagonal one : \n9 \n4624 \n4900 \n49 \n9604 \n1369 \n3249 \n1369 \n1296 \n6084 \n3136 \n6889 \n1936 \n441 \n169 \n4624 \n400 \n81 \n4761 \n\n\n\n\n\n\n\n\nDiagonal two : \n7396 \n4356 \n484 \n6241 \n289 \n784 \n3025 \n841 \n7396 \n6084 \n9216 \n256 \n7225 \n8100 \n8649 \n2401 \n1 \n100 \n1521 \n\n\n\n\n\n\n\n\nDiagonal one : 9 4624 4900 49 9604 1369 3249 1369 1296 6084 3136 6889 1936 441 169 4624 400 81 4761  \n\nDiagonal two : 7396 4356 484 6241 289 784 3025 841 7396 6084 9216 256 7225 8100 8649 2401 1 100 1521 #Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS"
    },
    {
        "stdout": "#Results: 7, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "DICE_THROW_PROBLEM"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_THE_FIRST_MISSING_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "K_TH_DIGIT_RAISED_POWER_B"
    },
    {
        "stdout": "93\n4\n74\n44\n112\n14\n15\n149\n102\n139\n#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_DIGITS_FACTORIAL_SET_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES.py\", line 48, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES.py\", line 22, in f_filled\n    if len(str1)!= len(str2):\nUnboundLocalError: local variable 'len' referenced before assignment\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "SUM_FIBONACCI_NUMBERS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MODULUS_TWO_FLOAT_DOUBLE_NUMBERS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "NTH_EVEN_LENGTH_PALINDROME"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SORT_ARRAY_TWO_HALVES_SORTED"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "PROGRAM_CALCULATE_VOLUME_OCTAHEDRON"
    },
    {
        "stdout": "#Results: 6, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "MINIMUM_PRODUCT_SUBSET_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PAPER_CUT_MINIMUM_NUMBER_SQUARES"
    },
    {
        "stdout": "",
        "stderr": "  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/REMOVE_BRACKETS_ALGEBRAIC_STRING_CONTAINING_OPERATORS.py\", line 65\n    x = (s[-1] == 1)? 0 : 1\n                    ^\nSyntaxError: invalid syntax\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "REMOVE_BRACKETS_ALGEBRAIC_STRING_CONTAINING_OPERATORS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE"
    },
    {
        "stdout": "#Results: 8, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "PRIME_NUMBERS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_TRIPLET_SUM_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_CALCULATE_AREA_OCTAGON"
    },
    {
        "stdout": "#Results: 6, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALINDROME"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACENT_IS_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1"
    },
    {
        "stdout": "No Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\n No Triplet Found\n-36   -26   62  \n-36   -6   42  \n-32   -32   64  \n-32   -16   48  \n-32   8   24  \n-32   -16   48  \n-32   8   24  \n-26   -20   46  \n-26   -16   42  \n-26   2   24  \n-16   2   14  \n-16   8   8  \n-6   -2   8  \n-36 -26 62\n-36 -6 42\n-32 -32 64\n-32 -16 48\n-32 8 24\n-32 -16 48\n-32 8 24\n-26 -20 46\n-26 -16 42\n-26 2 24\n-16 2 14\n-16 8 8\n-6 -2 8\n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\nNo Triplet Found\nNo Triplet Found\n No Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\n No Triplet Found\n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\n No Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\n No Triplet Found\n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0   0   0  \n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\nNo Triplet Found\n No Triplet Found\n#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2"
    },
    {
        "stdout": "",
        "stderr": "  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/NUMBER_IS_DIVISIBLE_BY_29_OR_NOT.py\", line 21\n    n = // 10\n        ^^\nSyntaxError: invalid syntax\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "NUMBER_IS_DIVISIBLE_BY_29_OR_NOT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "BREAK_NUMBER_THREE_PARTS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MINIMUM_XOR_VALUE_PAIR"
    },
    {
        "stdout": "#Results: 9, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY.py\", line 50, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY.py\", line 27, in f_filled\n    for i in range(0, n - 1) and j < 2:\nUnboundLocalError: local variable 'j' referenced before assignment\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY"
    },
    {
        "stdout": "#Results: 6, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SUM_PAIRWISE_PRODUCTS_2"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1"
    },
    {
        "stdout": "#Results: 9, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE.py\", line 56, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE.py\", line 33, in f_filled\n    max_sum = msis[0]\nIndexError: list index out of range\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SUM_MANHATTAN_DISTANCES_PAIRS_POINTS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCLE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SUBARRAYS_DISTINCT_ELEMENTS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "UNIQUE_CELLS_BINARY_MATRIX"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION"
    },
    {
        "stdout": "",
        "stderr": "  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S.py\", line 34\n    sum += arr[i] == 0? -1 : 1\n                      ^\nSyntaxError: invalid syntax\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "LONGEST_COMMON_SUBSTRING"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_OPERATORS_AND_NO_LOOPS"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "MAXIMUM_GAMES_PLAYED_WINNER"
    },
    {
        "stdout": "",
        "stderr": "  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING.py\", line 53\n    C[i][j] = min(C[i][j], C[i][k] + C[k + 1][j] + 1 for k in range(i, j))\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: Generator expression must be parenthesized\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY"
    },
    {
        "stdout": "#Results: 7, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE"
    },
    {
        "stdout": "#Results: 1, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING_ORDER_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE.py\", line 64, in <module>\n    f_filled(*(filled_function_param[i]))\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE.py\", line 29, in f_filled\n    arr[i] += (arr[max_idx] % max_elem) * max_elem\nUnboundLocalError: local variable 'max_idx' referenced before assignment\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "NUMBER_N_DIGIT_STEPPING_NUMBERS"
    },
    {
        "stdout": "28 36 36 36 36 37 56 55 55 50 47 46 44 25 32 33 35 36 38 39 40 44 37 56 52 51 43 38 34 30 25 24 21 38 21 29 13 14 15 16 17 23 30 30 31 33 44 38 59 54 44 42 42 42 39 33 31 29 23 23 21 20 37 18 21 12 18 19 28 28 29 30 31 32 33 33 35 37 38 45 38 59 57 47 54 52 36 33 29 28 28 26 24 17 13 10 10 13 19 22 11 20 11 16 18 19 22 24 25 31 34 38 47 47 48 52 58 58 38 39 49 41 59 58 48 55 47 41 41 38 38 36 34 31 31 29 27 26 20 18 17 9 9 18 8 10 9 10 16 13 11 18 18 19 20 21 22 23 23 27 29 29 29 30 30 37 63 42 39 50 55 61 59 53 56 48 48 47 40 39 36 35 34 31 30 29 28 27 24 23 18 15 12 13 9 7 14 5 2 7 9 14 12 11 8 8 12 20 21 22 23 24 24 29 40 42 45 48 51 51 51 52 46 65 47 42 51 57 62 67 57 56 50 57 59 51 49 49 48 45 43 40 39 34 29 27 20 17 12 10 10 9 5 11 13 8 7 9 4 2 5 7 11 11 6 6 7 14 15 16 19 20 25 26 32 33 33 35 36 37 38 39 44 44 51 53 53 46 66 48 45 52 58 63 69 58 62 51 59 60 56 51 49 48 47 47 45 42 36 32 31 26 26 22 22 21 17 17 11 11 7 3 8 3 6 5 7 4 1 5 3 9 10 5 4 4 3 8 9 9 10 11 21 24 26 26 27 34 35 37 40 42 43 43 44 50 52 52 57 54 47 67 48 48 55 60 67 73 63 62 53 59 62 66 62 60 57 52 52 51 49 48 47 47 46 46 44 43 43 30 29 23 20 16 16 9 5 4 2 7 1 1 1 5 1 1 4 2 6 5 5 2 2 2 7 11 16 18 18 19 21 25 29 31 34 34 36 37 40 46 51 52 54 55 60 66 66 67 52 62 59 58 68 51 49 56 64 71 73 63 66 55 62 62 67 64 56 55 53 50 44 41 39 35 35 34 34 34 32 31 25 24 24 19 17 16 14 8 6 4 28 36 36 36 36 37 56 55 55 50 47 46 44 25 32 33 35 36 38 39 40 44 37 56 52 51 43 38 34 30 25 24 21 38 21 29 13 14 15 16 17 23 30 30 31 33 44 38 59 54 44 42 42 42 39 33 31 29 23 23 21 20 37 18 21 12 18 19 28 28 29 30 31 32 33 33 35 37 38 45 38 59 57 47 54 52 36 33 29 28 28 26 24 17 13 10 10 13 19 22 11 20 11 16 18 19 22 24 25 31 34 38 47 47 48 52 58 58 38 39 49 41 59 58 48 55 47 41 41 38 38 36 34 31 31 29 27 26 20 18 17 9 9 18 8 10 9 10 16 13 11 18 18 19 20 21 22 23 23 27 29 29 29 30 30 37 63 42 39 50 55 61 59 53 56 48 48 47 40 39 36 35 34 31 30 29 28 27 24 23 18 15 12 13 9 7 14 5 2 7 9 14 12 11 8 8 12 20 21 22 23 24 24 29 40 42 45 48 51 51 51 52 46 65 47 42 51 57 62 67 57 56 50 57 59 51 49 49 48 45 43 40 39 34 29 27 20 17 12 10 10 9 5 11 13 8 7 9 4 2 5 7 11 11 6 6 7 14 15 16 19 20 25 26 32 33 33 35 36 37 38 39 44 44 51 53 53 46 66 48 45 52 58 63 69 58 62 51 59 60 56 51 49 48 47 47 45 42 36 32 31 26 26 22 22 21 17 17 11 11 7 3 8 3 6 5 7 4 1 5 3 9 10 5 4 4 3 8 9 9 10 11 21 24 26 26 27 34 35 37 40 42 43 43 44 50 52 52 57 54 47 67 48 48 55 60 67 73 63 62 53 59 62 66 62 60 57 52 52 51 49 48 47 47 46 46 44 43 43 30 29 23 20 16 16 9 5 4 2 7 1 1 1 5 1 1 4 2 6 5 5 2 2 2 7 11 16 18 18 19 21 25 29 31 34 34 36 37 40 46 51 52 54 55 60 66 66 67 52 62 59 58 68 51 49 56 64 71 73 63 66 55 62 62 67 64 56 55 53 50 44 41 39 35 35 34 34 34 32 31 25 24 24 19 17 16 14 8 6 4 -78 -66 50 2 -90 94 -86 -32 -20 60 16 58 -8 -86 44 0 -30 88 -50 92 -60 -98 -54 -64 -78 -58 -70 38 34 -74 60 58 -34 36 34 80 12 42 94 50 -32 24 -98 42 -30 52 -70 -94 30 6 -6 16 52 -26 26 36 16 -70 98 42 14 46 68 -66 -52 76 -24 -52 -92 -86 -58 8 92 62 -10 -24 -18 28 72 0 26 38 36 76 68 44 -76 84 84 64 -44 78 6 -20 -56 2 -2 -54 -6 14 -46 -54 -88 26 -82 50 -90 -34 50 46 -2 42 78 -24 -8 -90 -14 58 -22 -76 -84 90 10 -34 -42 -60 -40 72 88 -54 -70 -90 34 68 32 -36 90 -40 -10 -24 -64 46 -20 60 -36 -84 -46 82 -20 80 8 -18 58 12 92 30 20 18 -58 -50 -80 -68 50 -16 -4 32 -86 16 -2 -2 -48 4 -36 6 -44 -78 -76 14 -8 30 86 60 14 42 92 -10 90 82 -2 -58 60 -22 -80 10 -16 -28 46 -48 28 -16 42 -44 -42 -78 44 -56 74 -2 42 -98 -98 10 32 40 70 -8 92 -34 32 44 -70 -96 56 92 -40 -58 -80 -18 -10 -40 66 -20 -38 -16 -20 -94 66 50 -80 70 92 -64 56 58 -62 42 -62 64 68 92 -52 -80 -42 20 -12 -84 98 86 30 -54 26 -22 -52 -22 -24 -84 42 32 -78 -68 -38 10 76 -40 -8 26 58 -98 18 76 -56 -90 -40 96 32 94 -20 72 8 -24 56 46 -6 26 -42 -82 60 -4 -24 98 64 -86 -28 8 62 28 -92 -32 -68 -66 20 -8 -94 -78 26 72 80 -10 84 -26 -40 14 78 -40 -98 14 -58 -98 84 66 -8 66 -38 -14 -2 -78 82 22 40 0 -88 -20 -2 72 56 -40 -42 -24 -4 -10 50 28 74 -46 34 -88 38 -14 -78 -74 -70 74 -46 -98 -94 48 -84 -72 -40 -84 84 -92 -82 52 -24 6 -24 -8 -94 80 54 96 46 -74 -98 -30 -20 80 96 -36 4 -20 -32 -26 90 -4 -44 -84 60 -94 -18 98 -6 14 -82 -50 92 -74 54 28 -74 -22 80 -48 -60 98 -20 -32 10 -76 96 46 -86 56 66 -66 26 88 -58 68 44 -88 88 16 -78 4 -6 12 -80 -18 -46 -72 56 -4 6 28 -4 6 -32 44 -48 42 -44 -46 0 72 -16 98 12 70 88 46 60 90 -92 -66 -40 0 16 10 -86 14 -56 32 -56 -66 -4 72 16 -18 2 28 -48 -90 4 -94 88 -92 14 52 92 -34 -60 66 62 -56 -74 62 -92 24 96 -38 -32 -8 -42 -78 94 20 72 26 80 24 98 -34 -76 -4 90 -48 84 24 -46 26 -24 -58 40 -88 -82 14 -62 -2 -80 -68 44 -48 56 -70 -22 26 -78 96 22 -16 -68 26 82 -10 34 -20 -76 -64 38 54 -82 12 -32 96 18 -58 62 68 -40 90 -78 -44 -26 -90 -94 -40 -98 -74 -24 -58 -46 36 8 -30 -10 -20 -88 32 -30 6 -28 -62 80 -50 -34 -90 96 40 54 40 74 -32 -2 44 -68 -88 86 -92 -24 92 -28 -88 -66 -64 -38 -72 54 -44 64 36 88 -84 76 -82 14 52 6 22 -20 -18 96 -36 -6 -94 -18 60 -92 38 -82 -54 96 94 -6 -36 76 86 -48 2 -76 -78 82 -58 88 -96 36 16 -60 84 78 -38 98 -58 -30 -80 -86 10 -14 34 4 78 50 -8 10 60 52 -34 -44 -14 60 6 26 50 12 80 10 -34 -50 -72 88 -20 -38 -30 -46 98 -86 54 0 64 62 96 76 58 -32 -62 -92 2 -58 -54 30 86 -14 80 -72 62 -42 32 96 -64 6 -94 28 60 94 -98 -60 42 -20 -54 -10 98 2 34 26 -80 58 -36 -42 -46 -24 -62 18 98 28 -32 74 6 14 66 -10 20 6 18 86 -98 26 -94 58 54 62 -70 -98 -2 -86 26 24 -76 -18 -12 -86 8 -38 16 -4 40 -42 -94 16 -60 36 -96 22 4 82 80 -42 -70 54 -86 -70 54 -14 38 -70 -84 -28 18 -96 -30 26 14 42 56 -20 -40 -66 -66 -2 -46 54 18 54 68 -76 -52 78 -34 54 -56 10 -82 -58 -56 -86 20 54 16 60 -88 -30 86 -70 -20 4 -76 28 44 18 78 -40 -78 30 22 26 86 -2 -92 -46 2 -68 58 -6 14 56 -68 58 18 8 -58 38 74 40 16 -82 -46 32 -58 -4 4 22 56 -84 -6 6 -42 90 -72 -34 98 -10 8 74 -94 -28 50 44 12 26 -72 62 12 64 -78 -34 40 76 -28 28 52 34 -40 34 -74 60 -14 -96 72 0 28 -2 96 46 -36 26 20 72 -24 78 -32 18 -50 90 30 -30 96 -28 0 90 -92 14 8 -66 -74 70 -76 74 -74 -2 96 42 -14 96 48 26 -20 96 -12 62 -34 4 18 -36 76 86 68 -40 -46 -24 68 -88 90 -74 -42 -20 -26 -40 -26 62 46 -8 46 2 10 -80 86 -24 14 18 -8 -24 -8 22 40 -18 -30 98 -66 -58 8 92 -48 84 46 -14 -70 -12 -16 12 16 -88 -12 -48 -92 74 0 66 84 50 4 -2 74 80 -72 68 62 2 36 54 -14 -76 96 -72 24 -48 -42 56 90 -2 -32 -98 -14 -66 -98 -38 -12 -10 -52 40 82 -22 92 -42 -86 -12 42 24 -28 -74 88 24 62 -34 -90 58 60 4 24 20 2 -26 10 -86 -76 56 -82 -38 86 66 -92 -82 98 2 84 26 12 74 50 68 -20 -84 78 -84 34 92 -28 64 -50 -8 0 -60 46 -2 40 -58 -66 -80 -36 -44 76 -76 70 36 -8 60 -96 -50 -68 36 6 58 -74 -76 84 -4 -18 2 84 76 -2 60 -6 32 -86 -82 16 -60 -26 -66 80 -24 96 68 -50 -58 2 52 72 70 -60 30 18 44 -92 -38 72 12 86 28 -82 74 90 98 -4 18 76 92 96 -48 70 30 -80 -16 -38 -38 2 40 -82 78 46 -94 28 88 -8 18 -10 -40 52 6 -52 2 24 -68 -70 14 -96 40 74 -6 12 26 -8 -60 -74 -42 -66 -90 -50 6 64 0 -16 10 -36 46 -46 68 -26 78 -58 96 -30 0 -98 -80 36 -14 -42 -86 88 -48 56 94 12 -54 -16 54 -62 4 -40 58 -24 88 -28 74 -76 32 68 -22 6 -68 -98 -4 84 -86 78 -94 36 -68 26 -4 86 92 2 54 -84 98 44 86 -26 -60 6 98 -78 4 36 74 56 -96 -80 28 52 -28 56 -76 -2 8 -58 -14 62 -8 -94 48 -18 -40 -92 -52 -46 -14 -40 42 66 -78 -78 26 -22 -62 -6 6 -76 -56 12 8 -94 -40 78 36 -40 74 -6 0 26 -56 10 -58 56 24 -46 74 48 52 52 -26 -90 26 -70 90 50 34 98 40 -70 82 38 -12 84 -82 -64 -96 -62 -84 8 -24 82 24 -90 -12 -16 56 68 -52 -72 62 -66 -22 46 40 -68 78 54 68 42 -88 -34 32 94 30 42 20 -92 60 -46 -62 -4 72 54 26 -2 96 98 72 78 -56 -50 50 36 96 -42 42 -92 -80 -36 -84 66 -96 -4 60 28 -40 10 -20 -88 -18 -86 -68 64 -50 -16 -90 40 22 78 -76 30 12 6 76 78 18 16 -18 -34 -96 78 12 16 14 -14 18 -64 -26 -14 -84 -70 90 -50 -26 84 32 8 88 6 92 -98 88 64 -98 70 -14 -48 -62 0 44 -46 -60 -38 -78 -2 -64 -94 22 66 -78 -66 50 2 -90 94 -86 -32 -20 60 16 58 -8 -86 44 0 -30 88 -50 92 -60 -98 -54 -64 -78 -58 -70 38 34 -74 60 58 -34 36 34 80 12 42 94 50 -32 24 -98 42 -30 52 -70 -94 30 6 -6 16 52 -26 26 36 16 -70 98 42 14 46 68 -66 -52 76 -24 -52 -92 -86 -58 8 92 62 -10 -24 -18 28 72 0 26 38 36 76 68 44 -76 84 84 64 -44 78 6 -20 -56 2 -2 -54 -6 14 -46 -54 -88 26 -82 50 -90 -34 50 46 -2 42 78 -24 -8 -90 -14 58 -22 -76 -84 90 10 -34 -42 -60 -40 72 88 -54 -70 -90 34 68 32 -36 90 -40 -10 -24 -64 46 -20 60 -36 -84 -46 82 -20 80 8 -18 58 12 92 30 20 18 -58 -50 -80 -68 50 -16 -4 32 -86 16 -2 -2 -48 4 -36 6 -44 -78 -76 14 -8 30 86 60 14 42 92 -10 90 82 -2 -58 60 -22 -80 10 -16 -28 46 -48 28 -16 42 -44 -42 -78 44 -56 74 -2 42 -98 -98 10 32 40 70 -8 92 -34 32 44 -70 -96 56 92 -40 -58 -80 -18 -10 -40 66 -20 -38 -16 -20 -94 66 50 -80 70 92 -64 56 58 -62 42 -62 64 68 92 -52 -80 -42 20 -12 -84 98 86 30 -54 26 -22 -52 -22 -24 -84 42 32 -78 -68 -38 10 76 -40 -8 26 58 -98 18 76 -56 -90 -40 96 32 94 -20 72 8 -24 56 46 -6 26 -42 -82 60 -4 -24 98 64 -86 -28 8 62 28 -92 -32 -68 -66 20 -8 -94 -78 26 72 80 -10 84 -26 -40 14 78 -40 -98 14 -58 -98 84 66 -8 66 -38 -14 -2 -78 82 22 40 0 -88 -20 -2 72 56 -40 -42 -24 -4 -10 50 28 74 -46 34 -88 38 -14 -78 -74 -70 74 -46 -98 -94 48 -84 -72 -40 -84 84 -92 -82 52 -24 6 -24 -8 -94 80 54 96 46 -74 -98 -30 -20 80 96 -36 4 -20 -32 -26 90 -4 -44 -84 60 -94 -18 98 -6 14 -82 -50 92 -74 54 28 -74 -22 80 -48 -60 98 -20 -32 10 -76 96 46 -86 56 66 -66 26 88 -58 68 44 -88 88 16 -78 4 -6 12 -80 -18 -46 -72 56 -4 6 28 -4 6 -32 44 -48 42 -44 -46 0 72 -16 98 12 70 88 46 60 90 -92 -66 -40 0 16 10 -86 14 -56 32 -56 -66 -4 72 16 -18 2 28 -48 -90 4 -94 88 -92 14 52 92 -34 -60 66 62 -56 -74 62 -92 24 96 -38 -32 -8 -42 -78 94 20 72 26 80 24 98 -34 -76 -4 90 -48 84 24 -46 26 -24 -58 40 -88 -82 14 -62 -2 -80 -68 44 -48 56 -70 -22 26 -78 96 22 -16 -68 26 82 -10 34 -20 -76 -64 38 54 -82 12 -32 96 18 -58 62 68 -40 90 -78 -44 -26 -90 -94 -40 -98 -74 -24 -58 -46 36 8 -30 -10 -20 -88 32 -30 6 -28 -62 80 -50 -34 -90 96 40 54 40 74 -32 -2 44 -68 -88 86 -92 -24 92 -28 -88 -66 -64 -38 -72 54 -44 64 36 88 -84 76 -82 14 52 6 22 -20 -18 96 -36 -6 -94 -18 60 -92 38 -82 -54 96 94 -6 -36 76 86 -48 2 -76 -78 82 -58 88 -96 36 16 -60 84 78 -38 98 -58 -30 -80 -86 10 -14 34 4 78 50 -8 10 60 52 -34 -44 -14 60 6 26 50 12 80 10 -34 -50 -72 88 -20 -38 -30 -46 98 -86 54 0 64 62 96 76 58 -32 -62 -92 2 -58 -54 30 86 -14 80 -72 62 -42 32 96 -64 6 -94 28 60 94 -98 -60 42 -20 -54 -10 98 2 34 26 -80 58 -36 -42 -46 -24 -62 18 98 28 -32 74 6 14 66 -10 20 6 18 86 -98 26 -94 58 54 62 -70 -98 -2 -86 26 24 -76 -18 -12 -86 8 -38 16 -4 40 -42 -94 16 -60 36 -96 22 4 82 80 -42 -70 54 -86 -70 54 -14 38 -70 -84 -28 18 -96 -30 26 14 42 56 -20 -40 -66 -66 -2 -46 54 18 54 68 -76 -52 78 -34 54 -56 10 -82 -58 -56 -86 20 54 16 60 -88 -30 86 -70 -20 4 -76 28 44 18 78 -40 -78 30 22 26 86 -2 -92 -46 2 -68 58 -6 14 56 -68 58 18 8 -58 38 74 40 16 -82 -46 32 -58 -4 4 22 56 -84 -6 6 -42 90 -72 -34 98 -10 8 74 -94 -28 50 44 12 26 -72 62 12 64 -78 -34 40 76 -28 28 52 34 -40 34 -74 60 -14 -96 72 0 28 -2 96 46 -36 26 20 72 -24 78 -32 18 -50 90 30 -30 96 -28 0 90 -92 14 8 -66 -74 70 -76 74 -74 -2 96 42 -14 96 48 26 -20 96 -12 62 -34 4 18 -36 76 86 68 -40 -46 -24 68 -88 90 -74 -42 -20 -26 -40 -26 62 46 -8 46 2 10 -80 86 -24 14 18 -8 -24 -8 22 40 -18 -30 98 -66 -58 8 92 -48 84 46 -14 -70 -12 -16 12 16 -88 -12 -48 -92 74 0 66 84 50 4 -2 74 80 -72 68 62 2 36 54 -14 -76 96 -72 24 -48 -42 56 90 -2 -32 -98 -14 -66 -98 -38 -12 -10 -52 40 82 -22 92 -42 -86 -12 42 24 -28 -74 88 24 62 -34 -90 58 60 4 24 20 2 -26 10 -86 -76 56 -82 -38 86 66 -92 -82 98 2 84 26 12 74 50 68 -20 -84 78 -84 34 92 -28 64 -50 -8 0 -60 46 -2 40 -58 -66 -80 -36 -44 76 -76 70 36 -8 60 -96 -50 -68 36 6 58 -74 -76 84 -4 -18 2 84 76 -2 60 -6 32 -86 -82 16 -60 -26 -66 80 -24 96 68 -50 -58 2 52 72 70 -60 30 18 44 -92 -38 72 12 86 28 -82 74 90 98 -4 18 76 92 96 -48 70 30 -80 -16 -38 -38 2 40 -82 78 46 -94 28 88 -8 18 -10 -40 52 6 -52 2 24 -68 -70 14 -96 40 74 -6 12 26 -8 -60 -74 -42 -66 -90 -50 6 64 0 -16 10 -36 46 -46 68 -26 78 -58 96 -30 0 -98 -80 36 -14 -42 -86 88 -48 56 94 12 -54 -16 54 -62 4 -40 58 -24 88 -28 74 -76 32 68 -22 6 -68 -98 -4 84 -86 78 -94 36 -68 26 -4 86 92 2 54 -84 98 44 86 -26 -60 6 98 -78 4 36 74 56 -96 -80 28 52 -28 56 -76 -2 8 -58 -14 62 -8 -94 48 -18 -40 -92 -52 -46 -14 -40 42 66 -78 -78 26 -22 -62 -6 6 -76 -56 12 8 -94 -40 78 36 -40 74 -6 0 26 -56 10 -58 56 24 -46 74 48 52 52 -26 -90 26 -70 90 50 34 98 40 -70 82 38 -12 84 -82 -64 -96 -62 -84 8 -24 82 24 -90 -12 -16 56 68 -52 -72 62 -66 -22 46 40 -68 78 54 68 42 -88 -34 32 94 30 42 20 -92 60 -46 -62 -4 72 54 26 -2 96 98 72 78 -56 -50 50 36 96 -42 42 -92 -80 -36 -84 66 -96 -4 60 28 -40 10 -20 -88 -18 -86 -68 64 -50 -16 -90 40 22 78 -76 30 12 6 76 78 18 16 -18 -34 -96 78 12 16 14 -14 18 -64 -26 -14 -84 -70 90 -50 -26 84 32 8 88 6 92 -98 88 64 -98 70 -14 -48 -62 0 44 -46 -60 -38 -78 -2 -64 -94 22 66 1 1 1 1 1 0 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 53 53 -16 -14 20 14 14 -18 -16 -14 -6 6 4 24 26 24 20 18 4 10 -20 -24 -26 -24 -14 -10 -6 -6 12 20 26 30 42 38 38 24 22 14 12 0 6 -22 -24 -28 -16 -6 -4 0 2 10 18 20 -4 16 28 28 40 42 4 -4 -4 -8 -14 -16 -18 -20 -20 12 -24 0 -30 -24 -34 -18 -44 -40 -38 -32 -32 -22 -14 -12 0 4 26 6 22 30 28 44 46 8 40 36 28 20 16 14 10 -6 -10 -28 -30 -24 -4 -30 -4 -34 -24 -36 -26 -50 -24 -24 -24 -22 -16 -12 -12 2 14 18 24 26 12 26 20 26 36 30 52 54 16 42 36 34 32 28 22 22 16 8 2 0 -4 -8 -14 -32 -36 -8 -36 -10 -36 -32 -38 -42 -58 -26 -44 -34 -34 -32 -24 -22 -20 -16 -14 -12 -2 -2 4 6 30 16 28 20 26 36 34 56 60 26 52 36 22 10 2 0 -8 -10 -12 -14 -14 -24 -26 -28 -28 -28 -30 -14 -34 -38 -16 -38 -12 -38 -32 -40 -52 -64 -28 -48 -16 -2 8 12 14 14 24 38 40 42 44 44 46 48 56 68 6 44 28 32 28 30 46 36 60 60 30 52 38 24 44 18 18 16 10 10 6 -6 -8 -10 -14 -16 -22 -22 -32 -38 -38 -30 -16 -38 -42 -18 -38 -36 -48 -38 -50 -58 -64 -40 -48 -26 -22 -18 -18 -16 -16 -14 -10 -8 -8 -8 -8 -2 2 6 10 20 20 24 70 26 52 36 34 28 36 46 38 60 66 40 62 42 26 48 2 0 -6 -8 -12 -16 -30 -34 -34 -36 -38 -40 -40 -42 -48 -52 -62 -64 -64 -46 -34 -22 -40 -46 -18 -42 -50 -48 -46 -62 -64 -66 -42 -54 -30 -32 -62 -42 -42 -24 -22 -20 -20 -14 -14 -12 -10 -6 -6 -6 -2 2 4 20 30 36 30 70 26 64 36 38 38 36 48 46 62 66 44 66 44 36 56 8 68 66 56 54 40 34 20 2 -2 -22 -22 -26 -28 -34 -38 -42 -46 -50 -52 -54 -58 -68 -50 -36 -36 -50 -60 -24 -44 -68 -50 -48 -64 -72 -68 -44 -58 -34 -44 -64 -38 -38 -38 -36 -28 -28 -26 -12 0 2 2 12 20 24 30 32 40 44 60 62 70 76 42 40 76 28 72 38 40 44 38 50 62 70 74 46 68 48 36 58 30 76 34 32 32 32 18 16 4 -8 -20 -22 -24 -24 -24 -24 -36 -42 -54 -56 -58 -74 -74 -76 -76 -64 -76 -54 -44 -38 -54 -64 -40 -72 -74 -56 -56 -66 -80 -68 -50 -60 -36 -70 -76 -44 -44 -38 -22 -18 -14 -12 -10 -10 10 18 20 22 22 26 32 38 40 50 54 56 70 70 70 74 76 42 52 92 38 76 40 52 46 40 68 66 76 76 46 78 54 38 64 38 76 42 46 38 32 32 26 26 24 20 20 18 16 16 8 0 0 -12 -14 -38 -38 -44 -44 -50 -52 -64 -66 -78 -70 -82 -60 -44 -40 -58 -64 -48 -74 -82 -58 -58 -74 -86 -68 -56 -70 -40 -70 -78 -48 -58 -80 -72 -62 -54 -50 -46 -44 -42 -30 -30 -28 -26 -24 -8 -2 6 24 30 40 54 58 66 76 78 88 88 78 78 54 52 94 62 76 58 56 46 42 76 76 78 76 52 80 56 40 68 44 78 50 56 74 66 60 48 38 34 30 28 20 16 6 4 4 2 -8 -8 -16 -16 -18 -18 -24 -46 -50 -62 -64 -68 -78 -84 -80 -72 -86 -68 -54 -72 -62 -78 -66 -74 -82 -60 -68 -78 -86 -74 -56 -72 -50 -72 -78 -50 -70 -82 -86 -82 -74 -68 -64 -42 -36 -36 -34 -32 -26 -24 -16 -8 -2 0 18 22 22 26 30 32 34 44 58 58 60 60 88 82 78 58 54 94 64 76 64 72 74 60 80 76 84 82 68 80 60 64 70 46 80 58 68 78 78 74 74 66 64 64 60 60 58 54 34 26 22 20 18 16 14 14 8 0 -18 -18 -20 -24 -28 -28 -28 -50 -58 -78 -84 -80 -82 -94 -78 -62 -78 -78 -78 -70 -80 -84 -64 -70 -82 -88 -78 -60 -86 -60 -72 -82 -56 -70 -82 -88 -86 -62 -56 -52 -52 -48 -48 -46 -24 -22 -18 -12 -8 -4 2 4 4 10 12 16 18 18 20 26 26 30 46 54 68 70 66 88 82 84 62 62 94 78 78 66 74 82 68 84 78 84 84 74 80 66 68 76 68 82 62 70 78 80 72 60 42 40 36 22 14 12 10 -4 -6 -8 -14 -20 -22 -24 -28 -30 -30 -56 -60 -60 -60 -62 -64 -66 -66 -68 -70 -72 -76 -80 -86 -84 -90 -90 -94 -84 -82 -78 -80 -84 -76 -86 -86 -68 -74 -88 -88 -82 -68 -88 -74 -74 -90 -66 -88 -84 -94 -92 -80 -80 -74 -70 -62 -60 -44 -42 -40 -38 -34 -34 -30 -22 -20 -20 -20 -4 2 12 14 16 16 26 34 38 48 52 54 58 62 84 74 80 92 84 92 78 88 96 82 82 88 76 82 70 90 80 88 88 82 86 84 78 82 72 84 76 70 78 80 76 78 76 58 56 56 52 44 42 36 30 22 8 2 0 -6 -8 -12 -18 -22 -24 -24 -26 -32 -34 -34 -40 -42 -50 -52 -62 -62 -62 -70 -78 -82 -98 -86 -92 -90 -94 -86 -86 -82 -84 -88 -94 -92 -90 -80 -76 -90 -90 -82 -74 -88 -74 -94 -96 -84 -92 -86 -94 -92 -84 -96 -94 -88 -78 -62 -60 -56 -52 -48 -36 -36 -36 -24 -16 -16 -6 0 0 4 8 24 24 32 36 38 50 50 52 56 64 70 76 90 96 88 96 84 96 86 94 88 88 98 82 90 88 82 86 90 92 86 90 96 86 94 86 80 92 88 86 82 80 88 80 80 78 90 80 76 68 66 58 54 48 48 42 40 36 28 22 16 8 -6 -16 -24 -30 -30 -34 -38 -40 -40 -56 -56 -62 -62 -74 -74 -86 -88 -90 -96 -82 -90 -92 -98 -88 -98 -98 -96 -96 -88 -88 -86 -98 -94 -98 -92 -96 -84 -92 -92 -94 -98 -94 -94 -96 -98 -92 -98 -96 -98 -94 -98 -98 -98 -86 -80 -70 -70 -64 -60 -60 -58 -54 -52 -40 -38 -32 -24 -16 -16 -10 -10 -10 2 6 16 22 24 30 40 42 44 48 48 54 62 72 82 86 96 90 98 86 96 94 96 92 94 98 86 96 96 96 86 98 94 96 96 96 98 98 96 92 98 92 92 86 96 98 90 82 82 92 82 74 70 54 48 40 26 18 18 18 10 -6 -10 -14 -16 -18 -26 -30 -46 -48 -52 -56 -62 -62 -64 -68 -68 -70 -72 -78 -84 -84 -88 -92 -96 -98 -16 -14 20 14 14 -18 -16 -14 -6 6 4 24 26 24 20 18 4 10 -20 -24 -26 -24 -14 -10 -6 -6 12 20 26 30 42 38 38 24 22 14 12 0 6 -22 -24 -28 -16 -6 -4 0 2 10 18 20 -4 16 28 28 40 42 4 -4 -4 -8 -14 -16 -18 -20 -20 12 -24 0 -30 -24 -34 -18 -44 -40 -38 -32 -32 -22 -14 -12 0 4 26 6 22 30 28 44 46 8 40 36 28 20 16 14 10 -6 -10 -28 -30 -24 -4 -30 -4 -34 -24 -36 -26 -50 -24 -24 -24 -22 -16 -12 -12 2 14 18 24 26 12 26 20 26 36 30 52 54 16 42 36 34 32 28 22 22 16 8 2 0 -4 -8 -14 -32 -36 -8 -36 -10 -36 -32 -38 -42 -58 -26 -44 -34 -34 -32 -24 -22 -20 -16 -14 -12 -2 -2 4 6 30 16 28 20 26 36 34 56 60 26 52 36 22 10 2 0 -8 -10 -12 -14 -14 -24 -26 -28 -28 -28 -30 -14 -34 -38 -16 -38 -12 -38 -32 -40 -52 -64 -28 -48 -16 -2 8 12 14 14 24 38 40 42 44 44 46 48 56 68 6 44 28 32 28 30 46 36 60 60 30 52 38 24 44 18 18 16 10 10 6 -6 -8 -10 -14 -16 -22 -22 -32 -38 -38 -30 -16 -38 -42 -18 -38 -36 -48 -38 -50 -58 -64 -40 -48 -26 -22 -18 -18 -16 -16 -14 -10 -8 -8 -8 -8 -2 2 6 10 20 20 24 70 26 52 36 34 28 36 46 38 60 66 40 62 42 26 48 2 0 -6 -8 -12 -16 -30 -34 -34 -36 -38 -40 -40 -42 -48 -52 -62 -64 -64 -46 -34 -22 -40 -46 -18 -42 -50 -48 -46 -62 -64 -66 -42 -54 -30 -32 -62 -42 -42 -24 -22 -20 -20 -14 -14 -12 -10 -6 -6 -6 -2 2 4 20 30 36 30 70 26 64 36 38 38 36 48 46 62 66 44 66 44 36 56 8 68 66 56 54 40 34 20 2 -2 -22 -22 -26 -28 -34 -38 -42 -46 -50 -52 -54 -58 -68 -50 -36 -36 -50 -60 -24 -44 -68 -50 -48 -64 -72 -68 -44 -58 -34 -44 -64 -38 -38 -38 -36 -28 -28 -26 -12 0 2 2 12 20 24 30 32 40 44 60 62 70 76 42 40 76 28 72 38 40 44 38 50 62 70 74 46 68 48 36 58 30 76 34 32 32 32 18 16 4 -8 -20 -22 -24 -24 -24 -24 -36 -42 -54 -56 -58 -74 -74 -76 -76 -64 -76 -54 -44 -38 -54 -64 -40 -72 -74 -56 -56 -66 -80 -68 -50 -60 -36 -70 -76 -44 -44 -38 -22 -18 -14 -12 -10 -10 10 18 20 22 22 26 32 38 40 50 54 56 70 70 70 74 76 42 52 92 38 76 40 52 46 40 68 66 76 76 46 78 54 38 64 38 76 42 46 38 32 32 26 26 24 20 20 18 16 16 8 0 0 -12 -14 -38 -38 -44 -44 -50 -52 -64 -66 -78 -70 -82 -60 -44 -40 -58 -64 -48 -74 -82 -58 -58 -74 -86 -68 -56 -70 -40 -70 -78 -48 -58 -80 -72 -62 -54 -50 -46 -44 -42 -30 -30 -28 -26 -24 -8 -2 6 24 30 40 54 58 66 76 78 88 88 78 78 54 52 94 62 76 58 56 46 42 76 76 78 76 52 80 56 40 68 44 78 50 56 74 66 60 48 38 34 30 28 20 16 6 4 4 2 -8 -8 -16 -16 -18 -18 -24 -46 -50 -62 -64 -68 -78 -84 -80 -72 -86 -68 -54 -72 -62 -78 -66 -74 -82 -60 -68 -78 -86 -74 -56 -72 -50 -72 -78 -50 -70 -82 -86 -82 -74 -68 -64 -42 -36 -36 -34 -32 -26 -24 -16 -8 -2 0 18 22 22 26 30 32 34 44 58 58 60 60 88 82 78 58 54 94 64 76 64 72 74 60 80 76 84 82 68 80 60 64 70 46 80 58 68 78 78 74 74 66 64 64 60 60 58 54 34 26 22 20 18 16 14 14 8 0 -18 -18 -20 -24 -28 -28 -28 -50 -58 -78 -84 -80 -82 -94 -78 -62 -78 -78 -78 -70 -80 -84 -64 -70 -82 -88 -78 -60 -86 -60 -72 -82 -56 -70 -82 -88 -86 -62 -56 -52 -52 -48 -48 -46 -24 -22 -18 -12 -8 -4 2 4 4 10 12 16 18 18 20 26 26 30 46 54 68 70 66 88 82 84 62 62 94 78 78 66 74 82 68 84 78 84 84 74 80 66 68 76 68 82 62 70 78 80 72 60 42 40 36 22 14 12 10 -4 -6 -8 -14 -20 -22 -24 -28 -30 -30 -56 -60 -60 -60 -62 -64 -66 -66 -68 -70 -72 -76 -80 -86 -84 -90 -90 -94 -84 -82 -78 -80 -84 -76 -86 -86 -68 -74 -88 -88 -82 -68 -88 -74 -74 -90 -66 -88 -84 -94 -92 -80 -80 -74 -70 -62 -60 -44 -42 -40 -38 -34 -34 -30 -22 -20 -20 -20 -4 2 12 14 16 16 26 34 38 48 52 54 58 62 84 74 80 92 84 92 78 88 96 82 82 88 76 82 70 90 80 88 88 82 86 84 78 82 72 84 76 70 78 80 76 78 76 58 56 56 52 44 42 36 30 22 8 2 0 -6 -8 -12 -18 -22 -24 -24 -26 -32 -34 -34 -40 -42 -50 -52 -62 -62 -62 -70 -78 -82 -98 -86 -92 -90 -94 -86 -86 -82 -84 -88 -94 -92 -90 -80 -76 -90 -90 -82 -74 -88 -74 -94 -96 -84 -92 -86 -94 -92 -84 -96 -94 -88 -78 -62 -60 -56 -52 -48 -36 -36 -36 -24 -16 -16 -6 0 0 4 8 24 24 32 36 38 50 50 52 56 64 70 76 90 96 88 96 84 96 86 94 88 88 98 82 90 88 82 86 90 92 86 90 96 86 94 86 80 92 88 86 82 80 88 80 80 78 90 80 76 68 66 58 54 48 48 42 40 36 28 22 16 8 -6 -16 -24 -30 -30 -34 -38 -40 -40 -56 -56 -62 -62 -74 -74 -86 -88 -90 -96 -82 -90 -92 -98 -88 -98 -98 -96 -96 -88 -88 -86 -98 -94 -98 -92 -96 -84 -92 -92 -94 -98 -94 -94 -96 -98 -92 -98 -96 -98 -94 -98 -98 -98 -86 -80 -70 -70 -64 -60 -60 -58 -54 -52 -40 -38 -32 -24 -16 -16 -10 -10 -10 2 6 16 22 24 30 40 42 44 48 48 54 62 72 82 86 96 90 98 86 96 94 96 92 94 98 86 96 96 96 86 98 94 96 96 96 98 98 96 92 98 92 92 86 96 98 90 82 82 92 82 74 70 54 48 40 26 18 18 18 10 -6 -10 -14 -16 -18 -26 -30 -46 -48 -52 -56 -62 -62 -64 -68 -68 -70 -72 -78 -84 -84 -88 -92 -96 -98 1 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 0 1 1 1 0 1 0 0 0 1 1 1 0 0 1 0 0 1 0 0 0 0 1 0 1 0 0 1 0 1 0 0 1 1 0 1 1 0 0 1 1 1 0 0 0 0 0 1 0 0 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 0 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 1 0 1 1 0 0 1 1 0 1 0 1 0 0 1 1 1 1 1 0 1 0 0 0 1 1 1 1 1 1 1 0 1 1 1 1 0 0 0 1 1 1 1 1 1 1 0 1 1 0 0 0 1 0 0 0 1 1 0 1 0 1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 1 0 0 0 0 0 1 1 1 1 0 1 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 0 1 1 1 0 1 0 0 0 1 1 1 0 0 1 0 0 1 0 0 0 0 1 0 1 0 0 1 0 1 0 0 1 1 0 1 1 0 0 1 1 1 0 0 0 0 0 1 0 0 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 0 0 0 1 1 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 1 0 1 1 0 0 1 1 0 1 0 1 0 0 1 1 1 1 1 0 1 0 0 0 1 1 1 1 1 1 1 0 1 1 1 1 0 0 0 1 1 1 1 1 1 1 0 1 1 0 0 0 1 0 0 0 1 1 0 1 0 1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 1 0 0 0 0 0 1 1 1 1 0 30 31 32 39 39 40 46 49 51 51 53 60 63 57 56 55 54 54 52 50 46 44 37 28 27 26 21 25 21 30 38 38 39 45 47 50 57 60 66 73 74 75 77 73 63 79 73 72 71 69 69 68 64 59 55 35 34 33 26 25 20 15 24 20 22 23 25 28 38 44 52 52 56 61 63 66 73 73 74 75 77 78 77 64 79 82 81 73 71 66 66 60 58 57 55 54 44 43 39 38 38 26 18 18 15 24 20 14 31 33 34 39 42 44 45 46 47 47 48 53 57 58 67 71 71 71 76 77 81 82 65 82 87 78 78 77 69 61 57 57 55 54 45 45 40 33 33 33 33 29 18 16 13 17 16 15 23 20 9 23 13 15 21 24 26 32 32 36 40 40 43 44 44 51 51 52 55 58 61 71 72 83 79 84 85 78 83 89 86 81 81 77 74 64 64 63 61 60 59 56 50 48 47 45 44 43 41 38 35 35 28 10 12 14 12 20 14 8 23 4 13 14 15 18 18 20 21 23 28 33 34 37 44 54 55 56 59 68 72 73 82 88 93 76 86 85 89 94 79 89 89 87 81 85 82 76 75 73 71 69 66 64 63 61 57 53 48 46 40 35 29 25 17 15 14 13 10 4 5 6 7 10 14 12 8 20 3 8 8 14 20 20 21 28 32 32 39 39 39 40 45 48 49 55 66 66 76 82 88 92 95 96 96 96 82 87 93 95 96 81 89 90 89 85 88 92 91 85 83 82 82 81 78 68 61 59 58 55 53 49 46 40 40 34 33 28 23 12 8 6 3 9 3 3 1 6 4 7 10 7 20 2 4 4 11 11 13 14 18 20 22 30 36 41 44 46 55 58 58 62 63 64 65 65 69 70 72 73 86 89 91 97 98 94 91 95 96 97 91 95 95 91 95 95 93 98 96 95 88 76 75 75 72 71 68 64 63 55 48 44 39 38 33 32 31 29 19 15 13 9 6 1 1 2 6 3 2 1 5 3 3 3 4 14 2 2 4 4 3 4 5 9 10 12 17 18 22 35 36 39 39 43 53 56 56 57 63 68 70 71 75 75 83 87 92 93 97 93 97 99 97 93 97 96 98 99 96 95 92 99 99 96 98 94 88 87 85 83 81 75 75 74 73 69 60 60 59 57 49 45 40 36 33 32 23 11 8 7 7 6 4 4 30 31 32 39 39 40 46 49 51 51 53 60 63 57 56 55 54 54 52 50 46 44 37 28 27 26 21 25 21 30 38 38 39 45 47 50 57 60 66 73 74 75 77 73 63 79 73 72 71 69 69 68 64 59 55 35 34 33 26 25 20 15 24 20 22 23 25 28 38 44 52 52 56 61 63 66 73 73 74 75 77 78 77 64 79 82 81 73 71 66 66 60 58 57 55 54 44 43 39 38 38 26 18 18 15 24 20 14 31 33 34 39 42 44 45 46 47 47 48 53 57 58 67 71 71 71 76 77 81 82 65 82 87 78 78 77 69 61 57 57 55 54 45 45 40 33 33 33 33 29 18 16 13 17 16 15 23 20 9 23 13 15 21 24 26 32 32 36 40 40 43 44 44 51 51 52 55 58 61 71 72 83 79 84 85 78 83 89 86 81 81 77 74 64 64 63 61 60 59 56 50 48 47 45 44 43 41 38 35 35 28 10 12 14 12 20 14 8 23 4 13 14 15 18 18 20 21 23 28 33 34 37 44 54 55 56 59 68 72 73 82 88 93 76 86 85 89 94 79 89 89 87 81 85 82 76 75 73 71 69 66 64 63 61 57 53 48 46 40 35 29 25 17 15 14 13 10 4 5 6 7 10 14 12 8 20 3 8 8 14 20 20 21 28 32 32 39 39 39 40 45 48 49 55 66 66 76 82 88 92 95 96 96 96 82 87 93 95 96 81 89 90 89 85 88 92 91 85 83 82 82 81 78 68 61 59 58 55 53 49 46 40 40 34 33 28 23 12 8 6 3 9 3 3 1 6 4 7 10 7 20 2 4 4 11 11 13 14 18 20 22 30 36 41 44 46 55 58 58 62 63 64 65 65 69 70 72 73 86 89 91 97 98 94 91 95 96 97 91 95 95 91 95 95 93 98 96 95 88 76 75 75 72 71 68 64 63 55 48 44 39 38 33 32 31 29 19 15 13 9 6 1 1 2 6 3 2 1 5 3 3 3 4 14 2 2 4 4 3 4 5 9 10 12 17 18 22 35 36 39 39 43 53 56 56 57 63 68 70 71 75 75 83 87 92 93 97 93 97 99 97 93 97 96 98 99 96 95 92 99 99 96 98 94 88 87 85 83 81 75 75 74 73 69 60 60 59 57 49 45 40 36 33 32 23 11 8 7 7 6 4 4 26 12 -82 56 22 -66 90 -52 72 -56 28 -86 -54 18 46 -20 84 -64 50 -78 98 -70 -60 88 -94 80 46 -50 10 -46 26 48 -70 -8 -58 60 -34 98 88 -4 -64 -26 -22 80 -8 -66 48 -46 -80 94 72 -38 -64 26 -48 -38 58 -8 -70 80 -86 4 38 -88 2 -62 -22 48 -28 -56 -44 64 72 34 -24 -2 -64 2 -92 -54 -52 -74 -2 94 -38 60 56 -94 -84 80 98 12 20 -96 -18 64 -82 -38 -40 48 -30 94 68 -80 50 -56 -38 -36 -28 22 -36 96 -62 -74 -34 62 14 -16 -82 96 -96 -26 6 50 -62 90 72 98 86 32 -2 -46 52 8 0 -12 -30 -98 -98 96 46 -68 0 -94 -10 84 46 24 -74 -28 -60 36 86 50 -72 -10 -22 -8 44 48 -98 -16 -6 40 80 38 -94 74 82 42 -84 10 66 52 6 8 90 -4 -22 44 -2 -28 44 -30 72 -26 52 -94 -4 74 80 -22 -16 -64 38 30 -24 6 68 -12 -28 24 54 22 -44 -56 -8 -52 96 -26 -70 24 -20 38 -88 -18 -30 -32 72 -2 96 -56 36 -74 -60 42 -98 82 62 86 -38 82 18 -72 80 -12 64 -56 54 70 8 92 28 46 -24 8 28 98 4 42 78 -60 -12 26 -22 -38 -56 -74 -48 -22 98 -66 -4 -62 18 34 -28 64 86 -72 18 44 -82 18 34 -48 86 80 44 18 38 86 64 58 72 84 -58 44 -18 72 -94 -94 -20 -2 -40 38 84 54 -76 92 -14 92 -26 52 -26 76 -78 68 6 -20 -60 80 -6 -24 40 6 32 12 -52 -62 -92 22 30 18 14 0 -86 30 66 64 -72 -34 -66 54 6 -64 -88 -30 64 -72 16 92 -56 44 -72 -28 -28 -8 38 -78 10 -18 -2 -92 -52 -38 74 70 -42 14 -44 68 64 46 66 -44 -36 -6 -56 4 88 -34 28 24 74 -36 -66 36 42 -50 -34 -12 -48 -90 18 -48 14 20 -38 62 42 62 50 -18 74 0 -72 84 -42 12 28 18 54 90 -58 44 72 58 2 -38 90 54 -6 -18 -2 -72 -60 52 28 -32 -52 80 56 -50 -48 28 -94 80 -10 68 -2 -70 -86 -2 18 36 92 16 -16 26 66 -4 2 44 76 54 78 -50 64 -6 24 58 -70 -84 24 34 -80 -14 26 40 -6 0 24 -92 36 54 34 -94 82 70 98 58 10 72 -56 -26 60 4 18 54 40 -98 -68 -34 28 38 52 -46 -28 28 -82 14 98 16 8 14 -78 -2 -98 70 -8 -56 -68 -66 16 -96 -76 10 -2 -84 4 -26 -86 52 82 44 84 50 -84 76 -60 -44 -38 -34 -86 -38 -92 -6 -80 -68 -2 16 44 -24 -96 4 84 46 -46 -46 24 -22 30 30 18 -40 46 18 -14 -74 -18 32 -40 66 30 10 6 90 -40 34 36 -52 -72 98 -38 80 -92 -84 40 50 10 90 -36 18 -48 42 -34 -68 28 -82 -54 36 -4 54 2 48 -24 50 -36 -62 68 76 68 -6 -72 4 64 14 92 0 -70 8 -32 -50 -22 16 92 32 66 38 8 -96 22 -38 26 4 44 -82 64 -62 32 32 64 -94 12 84 -42 -14 66 6 60 12 4 88 40 -52 20 -24 -14 40 14 -68 88 82 -6 -40 -56 -98 -48 -94 -48 -46 70 -96 72 12 -64 -80 56 8 50 -20 -50 2 92 60 -56 46 -86 -90 -72 -72 -10 -52 96 -48 -64 -98 -92 -84 18 94 28 36 -80 -70 70 -6 76 -6 50 -4 -42 54 80 84 -64 14 -22 -74 -42 34 12 30 -70 82 66 14 -94 -60 32 88 20 94 26 2 82 44 -32 2 74 -12 32 -30 -84 -18 -32 68 -6 -14 -50 78 -60 -90 -12 58 66 -94 58 32 70 52 -96 -24 34 -64 -92 -90 32 12 98 8 98 -46 84 -6 90 -38 34 -94 -96 90 -64 -88 92 20 -50 6 -34 -94 66 -8 86 -48 26 -82 -92 66 70 42 -54 18 12 -50 62 94 -38 -10 -22 -66 -14 -32 -16 -10 -56 -72 6 28 -24 28 -18 -52 -68 48 -60 76 -4 -92 54 -52 56 24 56 -38 80 -84 -46 -36 10 78 68 -46 52 64 76 10 -74 92 66 -42 -42 -84 -4 70 96 -52 48 -48 -32 46 -66 90 -14 -64 48 6 -12 60 -44 34 -90 86 0 -66 44 66 82 60 76 6 -38 90 96 64 6 6 -24 -60 76 52 94 -80 -80 -88 -26 22 -52 78 -78 -90 -96 -96 62 58 72 -92 -32 -30 -48 16 -30 54 -40 -20 -32 -38 -4 -66 58 36 92 88 50 98 -90 8 -12 -56 12 68 66 44 34 -30 20 48 20 12 16 -96 46 -8 30 48 0 -4 -56 4 -76 -14 -70 -50 -90 88 44 44 80 12 -4 82 2 -40 -22 2 -26 -96 -22 62 -74 46 -68 -14 -36 64 84 30 50 -80 26 0 56 78 -46 -62 22 -92 -12 44 88 -58 -56 64 -36 20 12 -94 -44 -54 -30 -34 76 24 -12 6 -4 30 -90 16 -12 -18 86 -12 22 34 -52 30 -96 60 30 -60 80 48 -8 -14 38 -26 78 84 -42 90 -88 78 84 50 26 68 -60 -78 42 -88 66 -94 -74 72 -34 20 90 68 10 38 86 94 30 38 -88 -74 24 -86 60 34 92 -52 -4 -36 62 86 -96 -14 -32 60 50 -24 -54 -22 -28 -22 -58 -62 -20 -98 -74 58 60 -56 -4 -56 6 42 -92 0 -44 76 -56 88 64 72 -12 -66 50 -84 -40 -92 -62 -4 32 -74 -60 -40 0 96 38 78 -88 14 48 6 26 42 -26 -80 16 34 26 -64 60 -36 -70 28 68 6 -44 -94 -82 42 -76 -60 80 -28 -98 -12 94 32 -10 38 -82 -80 -26 2 -54 -32 -60 -92 90 -34 -22 -98 -6 -94 36 46 -48 -64 -84 50 -22 8 26 26 12 -82 56 22 -66 90 -52 72 -56 28 -86 -54 18 46 -20 84 -64 50 -78 98 -70 -60 88 -94 80 46 -50 10 -46 26 48 -70 -8 -58 60 -34 98 88 -4 -64 -26 -22 80 -8 -66 48 -46 -80 94 72 -38 -64 26 -48 -38 58 -8 -70 80 -86 4 38 -88 2 -62 -22 48 -28 -56 -44 64 72 34 -24 -2 -64 2 -92 -54 -52 -74 -2 94 -38 60 56 -94 -84 80 98 12 20 -96 -18 64 -82 -38 -40 48 -30 94 68 -80 50 -56 -38 -36 -28 22 -36 96 -62 -74 -34 62 14 -16 -82 96 -96 -26 6 50 -62 90 72 98 86 32 -2 -46 52 8 0 -12 -30 -98 -98 96 46 -68 0 -94 -10 84 46 24 -74 -28 -60 36 86 50 -72 -10 -22 -8 44 48 -98 -16 -6 40 80 38 -94 74 82 42 -84 10 66 52 6 8 90 -4 -22 44 -2 -28 44 -30 72 -26 52 -94 -4 74 80 -22 -16 -64 38 30 -24 6 68 -12 -28 24 54 22 -44 -56 -8 -52 96 -26 -70 24 -20 38 -88 -18 -30 -32 72 -2 96 -56 36 -74 -60 42 -98 82 62 86 -38 82 18 -72 80 -12 64 -56 54 70 8 92 28 46 -24 8 28 98 4 42 78 -60 -12 26 -22 -38 -56 -74 -48 -22 98 -66 -4 -62 18 34 -28 64 86 -72 18 44 -82 18 34 -48 86 80 44 18 38 86 64 58 72 84 -58 44 -18 72 -94 -94 -20 -2 -40 38 84 54 -76 92 -14 92 -26 52 -26 76 -78 68 6 -20 -60 80 -6 -24 40 6 32 12 -52 -62 -92 22 30 18 14 0 -86 30 66 64 -72 -34 -66 54 6 -64 -88 -30 64 -72 16 92 -56 44 -72 -28 -28 -8 38 -78 10 -18 -2 -92 -52 -38 74 70 -42 14 -44 68 64 46 66 -44 -36 -6 -56 4 88 -34 28 24 74 -36 -66 36 42 -50 -34 -12 -48 -90 18 -48 14 20 -38 62 42 62 50 -18 74 0 -72 84 -42 12 28 18 54 90 -58 44 72 58 2 -38 90 54 -6 -18 -2 -72 -60 52 28 -32 -52 80 56 -50 -48 28 -94 80 -10 68 -2 -70 -86 -2 18 36 92 16 -16 26 66 -4 2 44 76 54 78 -50 64 -6 24 58 -70 -84 24 34 -80 -14 26 40 -6 0 24 -92 36 54 34 -94 82 70 98 58 10 72 -56 -26 60 4 18 54 40 -98 -68 -34 28 38 52 -46 -28 28 -82 14 98 16 8 14 -78 -2 -98 70 -8 -56 -68 -66 16 -96 -76 10 -2 -84 4 -26 -86 52 82 44 84 50 -84 76 -60 -44 -38 -34 -86 -38 -92 -6 -80 -68 -2 16 44 -24 -96 4 84 46 -46 -46 24 -22 30 30 18 -40 46 18 -14 -74 -18 32 -40 66 30 10 6 90 -40 34 36 -52 -72 98 -38 80 -92 -84 40 50 10 90 -36 18 -48 42 -34 -68 28 -82 -54 36 -4 54 2 48 -24 50 -36 -62 68 76 68 -6 -72 4 64 14 92 0 -70 8 -32 -50 -22 16 92 32 66 38 8 -96 22 -38 26 4 44 -82 64 -62 32 32 64 -94 12 84 -42 -14 66 6 60 12 4 88 40 -52 20 -24 -14 40 14 -68 88 82 -6 -40 -56 -98 -48 -94 -48 -46 70 -96 72 12 -64 -80 56 8 50 -20 -50 2 92 60 -56 46 -86 -90 -72 -72 -10 -52 96 -48 -64 -98 -92 -84 18 94 28 36 -80 -70 70 -6 76 -6 50 -4 -42 54 80 84 -64 14 -22 -74 -42 34 12 30 -70 82 66 14 -94 -60 32 88 20 94 26 2 82 44 -32 2 74 -12 32 -30 -84 -18 -32 68 -6 -14 -50 78 -60 -90 -12 58 66 -94 58 32 70 52 -96 -24 34 -64 -92 -90 32 12 98 8 98 -46 84 -6 90 -38 34 -94 -96 90 -64 -88 92 20 -50 6 -34 -94 66 -8 86 -48 26 -82 -92 66 70 42 -54 18 12 -50 62 94 -38 -10 -22 -66 -14 -32 -16 -10 -56 -72 6 28 -24 28 -18 -52 -68 48 -60 76 -4 -92 54 -52 56 24 56 -38 80 -84 -46 -36 10 78 68 -46 52 64 76 10 -74 92 66 -42 -42 -84 -4 70 96 -52 48 -48 -32 46 -66 90 -14 -64 48 6 -12 60 -44 34 -90 86 0 -66 44 66 82 60 76 6 -38 90 96 64 6 6 -24 -60 76 52 94 -80 -80 -88 -26 22 -52 78 -78 -90 -96 -96 62 58 72 -92 -32 -30 -48 16 -30 54 -40 -20 -32 -38 -4 -66 58 36 92 88 50 98 -90 8 -12 -56 12 68 66 44 34 -30 20 48 20 12 16 -96 46 -8 30 48 0 -4 -56 4 -76 -14 -70 -50 -90 88 44 44 80 12 -4 82 2 -40 -22 2 -26 -96 -22 62 -74 46 -68 -14 -36 64 84 30 50 -80 26 0 56 78 -46 -62 22 -92 -12 44 88 -58 -56 64 -36 20 12 -94 -44 -54 -30 -34 76 24 -12 6 -4 30 -90 16 -12 -18 86 -12 22 34 -52 30 -96 60 30 -60 80 48 -8 -14 38 -26 78 84 -42 90 -88 78 84 50 26 68 -60 -78 42 -88 66 -94 -74 72 -34 20 90 68 10 38 86 94 30 38 -88 -74 24 -86 60 34 92 -52 -4 -36 62 86 -96 -14 -32 60 50 -24 -54 -22 -28 -22 -58 -62 -20 -98 -74 58 60 -56 -4 -56 6 42 -92 0 -44 76 -56 88 64 72 -12 -66 50 -84 -40 -92 -62 -4 32 -74 -60 -40 0 96 38 78 -88 14 48 6 26 42 -26 -80 16 34 26 -64 60 -36 -70 28 68 6 -44 -94 -82 42 -76 -60 80 -28 -98 -12 94 32 -10 38 -82 -80 -26 2 -54 -32 -60 -92 90 -34 -22 -98 -6 -94 36 46 -48 -64 -84 50 -22 8 26 1 0 0 1 1 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 0 0 1 1 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 15 32 95 5 73 45 22 7 53 7 93 35 35 36 35 39 21 81 56 14 54 44 52 31 17 79 57 3 86 78 7 18 55 40 51 72 71 68 84 43 43 35 62 48 6 23 9 41 85 25 71 59 64 41 46 30 54 92 89 19 55 88 67 47 92 44 4 75 98 51 34 48 45 64 21 73 94 79 88 45 48 78 16 98 27 68 1 34 91 95 1 67 60 25 73 65 3 16 63 76 24 21 7 75 98 11 10 94 78 39 21 10 24 83 10 45 81 56 50 44 69 29 77 22 53 4 45 69 18 94 17 94 97 36 59 53 21 24 27 38 25 44 70 58 83 67 29 50 24 41 23 95 76 84 55 75 79 15 68 19 97 95 74 40 58 88 55 19 4 2 97 22 64 75 89 30 78 84 99 53 90 60 94 20 7 96 98 26 89 58 86 71 41 26 56 54 75 55 96 9 28 17 98 71 84 97 86 70 94 85 2 51 96 41 72 93 34 51 63 56 10 44 16 12 15 32 95 5 73 45 22 7 53 7 93 35 35 36 35 39 21 81 56 14 54 44 52 31 17 79 57 3 86 78 7 18 55 40 51 72 71 68 84 43 43 35 62 48 6 23 9 41 85 25 71 59 64 41 46 30 54 92 89 19 55 88 67 47 92 44 4 75 98 51 34 48 45 64 21 73 94 79 88 45 48 78 16 98 27 68 1 34 91 95 1 67 60 25 73 65 3 16 63 76 24 21 7 75 98 11 10 94 78 39 21 10 24 83 10 45 81 56 50 44 69 29 77 22 53 4 45 69 18 94 17 94 97 36 59 53 21 24 27 38 25 44 70 58 83 67 29 50 24 41 23 95 76 84 55 75 79 15 68 19 97 95 74 40 58 88 55 19 4 2 97 22 64 75 89 30 78 84 99 53 90 60 94 20 7 96 98 26 89 58 86 71 41 26 56 54 75 55 96 9 28 17 98 71 84 97 86 70 94 85 2 51 96 41 72 93 34 51 63 56 10 44 16 12 #Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PRINT_MATRIX_ANTISPIRAL_FORM"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/PROGRAM_BINARY_DECIMAL_CONVERSION_1.py\", line 50, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/PROGRAM_BINARY_DECIMAL_CONVERSION_1.py\", line 26, in f_filled\n    len = len(num)\nUnboundLocalError: local variable 'len' referenced before assignment\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "PROGRAM_BINARY_DECIMAL_CONVERSION_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_FIND_STRING_START_END_GEEKS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBER_OF_CHARACTERS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "N_TH_TERM_SERIES_2_12_36_80_150"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_ARRAYS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES"
    },
    {
        "stdout": "Point inside the viewing pane:\n\nPoint outside the viewing pane:\n[6, 6] \n[1, 2] \n[3, 5] \n[3, 6] \n[6, 12] \n[3, 8] \n[1, 6] \n[1, 3] \n[1, 1] \n[3, 4] \n[1, 2] \n[4, 6] \n[1, 1] \n[1, 6] \n[5, 9] \n[2, 4] \n[1, 3] \n[5, 7] \n[2, 3] \n[14, 16] \n[1, 2] \n[1, 2] \n[6, 7] \n[1, 6] \n[3, 4] \n[2, 7] \n[11, 11] \n[1, 3] \n[1, 3] \n[2, 6] \n[4, 5] \n[4, 10] \n[1, 3] \n[3, 4] \n[4, 6] \n[2, 4] \n[4, 5] \n[1, 7] \n[5, 9] \n[6, 7] \n[2, 4] \nPoint inside the viewing pane:\n\n\nPoint outside the viewing pane:\n[6, 6][6, 6][1, 2][1, 2][3, 5][3, 5][3, 6][3, 6][6, 12][6, 12][3, 8][3, 8][1, 6][1, 6][1, 3][1, 3][1, 1][1, 1][3, 4][3, 4][1, 2][1, 2][4, 6][4, 6][1, 1][1, 1][1, 6][1, 6][5, 9][5, 9][2, 4][2, 4][1, 3][1, 3][5, 7][5, 7][2, 3][2, 3][14, 16][14, 16][1, 2][1, 2][1, 2][1, 2][6, 7][6, 7][1, 6][1, 6][3, 4][3, 4][2, 7][2, 7][11, 11][11, 11][1, 3][1, 3][1, 3][1, 3][2, 6][2, 6][4, 5][4, 5][4, 10][4, 10][1, 3][1, 3][3, 4][3, 4][4, 6][4, 6][2, 4][2, 4][4, 5][4, 5][1, 7][1, 7][5, 9][5, 9][6, 7][6, 7][2, 4][2, 4]Point inside the viewing pane:\n\nPoint outside the viewing pane:\n[56, 8] \n[-28, -72] \n[62, 10] \n[-12, 74] \n[-10, -96] \n[98, -70] \n[-18, -46] \n[-68, -34] \n[64, 34] \n[-14, 52] \n[46, 32] \n[14, -40] \n[-78, -18] \n[40, -28] \n[2, 28] \n[30, -84] \n[-54, -44] \n[70, 36] \n[42, 16] \n[54, 22] \n[74, 14] \n[72, 44] \n[52, -96] \n[-58, -66] \n[20, 38] \n[-48, -78] \n[10, 42] \n[-72, -80] \nPoint inside the viewing pane:\n\n\nPoint outside the viewing pane:\n[56, 8][56, 8][-28, -72][-28, -72][62, 10][62, 10][-12, 74][-12, 74][-10, -96][-10, -96][98, -70][98, -70][-18, -46][-18, -46][-68, -34][-68, -34][64, 34][-14, 52][-14, 52][46, 32][14, -40][14, -40][-78, -18][-78, -18][40, -28][40, -28][2, 28][30, -84][30, -84][-54, -44][-54, -44][70, 36][42, 16][42, 16][54, 22][54, 22][74, 14][74, 14][72, 44][72, 44][52, -96][52, -96][-58, -66][-58, -66][20, 38][20, 38][-48, -78][-48, -78][10, 42][10, 42][-72, -80][-72, -80]Point inside the viewing pane:\n\nPoint outside the viewing pane:\n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \nPoint inside the viewing pane:\n\n\nPoint outside the viewing pane:\n[0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0]Point inside the viewing pane:\n\nPoint outside the viewing pane:\n[94, 63] \n[27, 93] \n[26, 81] \n[45, 47] \n[16, 64] \n[62, 22] \n[48, 58] \n[80, 56] \n[43, 63] \n[29, 60] \n[5, 46] \n[21, 67] \n[64, 50] \n[64, 83] \n[1, 60] \n[95, 96] \n[1, 53] \n[74, 96] \n[55, 78] \n[47, 40] \n[45, 47] \n[49, 21] \n[98, 83] \n[57, 75] \n[93, 66] \n[34, 37] \n[69, 86] \n[98, 63] \n[91, 30] \n[12, 6] \n[20, 35] \n[56, 60] \n[11, 74] \n[61, 81] \n[76, 6] \n[9, 98] \n[13, 61] \n[96, 50] \n[68, 83] \n[89, 64] \nPoint inside the viewing pane:\n\n\nPoint outside the viewing pane:\n[94, 63][94, 63][27, 93][26, 81][45, 47][45, 47][16, 64][16, 64][62, 22][62, 22][48, 58][48, 58][80, 56][80, 56][43, 63][29, 60][5, 46][5, 46][21, 67][21, 67][64, 50][64, 50][64, 83][64, 83][1, 60][1, 60][95, 96][95, 96][1, 53][1, 53][74, 96][74, 96][55, 78][55, 78][47, 40][47, 40][45, 47][45, 47][49, 21][49, 21][98, 83][98, 83][57, 75][57, 75][93, 66][93, 66][34, 37][69, 86][69, 86][98, 63][98, 63][91, 30][12, 6][12, 6][20, 35][20, 35][56, 60][56, 60][11, 74][11, 74][61, 81][61, 81][76, 6][76, 6][9, 98][9, 98][13, 61][13, 61][96, 50][96, 50][68, 83][68, 83][89, 64][89, 64]Point inside the viewing pane:\n\nPoint outside the viewing pane:\n[-86, -40] \n[-76, -28] \n[-88, -74] \n[-86, -42] \nPoint inside the viewing pane:\n\n\nPoint outside the viewing pane:\n[-86, -40][-86, -40][-76, -28][-76, -28][-88, -74][-88, -74][-86, -42][-86, -42]Point inside the viewing pane:\n\nPoint outside the viewing pane:\n[1, 0] \n[1, 1] \n[0, 1] \n[1, 0] \n[0, 1] \n[1, 1] \n[0, 1] \n[1, 1] \n[0, 0] \n[1, 1] \n[0, 1] \n[0, 0] \n[1, 0] \n[1, 0] \n[0, 1] \n[0, 1] \n[1, 0] \nPoint inside the viewing pane:\n\n\nPoint outside the viewing pane:\n[1, 0][1, 0][1, 1][1, 1][0, 1][0, 1][1, 0][1, 0][0, 1][0, 1][1, 1][1, 1][0, 1][0, 1][1, 1][1, 1][0, 0][0, 0][1, 1][1, 1][0, 1][0, 1][0, 0][0, 0][1, 0][1, 0][1, 0][1, 0][0, 1][0, 1][0, 1][0, 1][1, 0][1, 0]Point inside the viewing pane:\n\nPoint outside the viewing pane:\n[1, 10] \n[10, 18] \n[4, 5] \n[9, 12] \n[3, 5] \n[4, 5] \n[2, 11] \n[2, 4] \n[6, 7] \n[1, 3] \n[2, 6] \n[3, 12] \n[2, 3] \n[4, 11] \n[10, 12] \n[6, 6] \n[4, 6] \n[3, 4] \n[1, 6] \n[1, 2] \n[3, 7] \n[4, 4] \n[2, 2] \n[3, 7] \n[4, 4] \n[1, 5] \n[1, 7] \n[4, 5] \n[2, 4] \nPoint inside the viewing pane:\n\n\nPoint outside the viewing pane:\n[1, 10][1, 10][10, 18][10, 18][4, 5][4, 5][9, 12][9, 12][3, 5][3, 5][4, 5][4, 5][2, 11][2, 11][2, 4][2, 4][6, 7][6, 7][1, 3][1, 3][2, 6][2, 6][3, 12][3, 12][2, 3][2, 3][4, 11][4, 11][10, 12][10, 12][6, 6][6, 6][4, 6][4, 6][3, 4][3, 4][1, 6][1, 6][1, 2][1, 2][3, 7][3, 7][4, 4][4, 4][2, 2][2, 2][3, 7][3, 7][4, 4][4, 4][1, 5][1, 5][1, 7][1, 7][4, 5][4, 5][2, 4][2, 4]Point inside the viewing pane:\n\nPoint outside the viewing pane:\n[0, 62] \n[-80, -78] \n[-94, 70] \n[34, -36] \n[-34, 64] \n[34, -78] \n[-78, -8] \n[-42, -56] \n[-8, -22] \n[30, 94] \n[82, -94] \n[-26, -60] \n[0, -92] \n[-96, 36] \n[42, -66] \n[-34, 20] \nPoint inside the viewing pane:\n\n\nPoint outside the viewing pane:\n[0, 62][0, 62][-80, -78][-80, -78][-94, 70][-94, 70][34, -36][34, -36][-34, 64][-34, 64][34, -78][34, -78][-78, -8][-78, -8][-42, -56][-42, -56][-8, -22][-8, -22][30, 94][30, 94][82, -94][82, -94][-26, -60][-26, -60][0, -92][0, -92][-96, 36][-96, 36][42, -66][42, -66][-34, 20][-34, 20]Point inside the viewing pane:\n\nPoint outside the viewing pane:\n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \n[0, 0] \nPoint inside the viewing pane:\n\n\nPoint outside the viewing pane:\n[0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0][0, 0]Point inside the viewing pane:\n\nPoint outside the viewing pane:\n[69, 28] \n[60, 34] \n[7, 43] \n[53, 15] \n[6, 61] \n[32, 24] \n[98, 4] \n[52, 54] \n[92, 46] \n[93, 72] \n[21, 73] \n[79, 67] \n[28, 89] \n[38, 20] \n[4, 37] \nPoint inside the viewing pane:\n\n\nPoint outside the viewing pane:\n[69, 28][69, 28][60, 34][60, 34][7, 43][7, 43][53, 15][53, 15][6, 61][6, 61][32, 24][32, 24][98, 4][98, 4][52, 54][52, 54][92, 46][92, 46][93, 72][93, 72][21, 73][21, 73][79, 67][79, 67][28, 89][28, 89][38, 20][38, 20][4, 37][4, 37]#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_BALANCED_BINARY_TREES_HEIGHT_H"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "LARGEST_SUBSEQUENCE_GCD_GREATER_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "NEXT_POWER_OF_2"
    },
    {
        "stdout": "#Results: 6, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING.py\", line 58, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING.py\", line 27, in f_filled\n    n = len(s)\nUnboundLocalError: local variable 'len' referenced before assignment\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "NUMBER_RECTANGLES_NM_GRID"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "DIAGONALLY_DOMINANT_MATRIX"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "FIND_THE_MISSING_NUMBER_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SQUARED_TRIANGULAR_NUMBER_SUM_CUBES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHER_0_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_SUM_BITONIC_SUBARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SQUARE_ROOT_OF_A_PERFECT_SQUARE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEMENT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_IN_ITS_ORIGINAL_POSITION_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX"
    },
    {
        "stdout": "(5, 2), \n(5, 2), \n(2, 5), \n(3, 4), \n(2, 5), \n(3, 4), \n(3, 4), \n(2, 5), \n(2, 5), \n(2, 5), \n(2, 5), \n(2, 5), \n(2, 5), \n(2, 5), \n(4, 3), \n(4, 3), \n(3, 4), \n(3, 4), \n(4, 3), \n( 5 ,  2 ),  ( 5 ,  2 ),  ( 2 ,  5 ),  ( 3 ,  4 ),  ( 2 ,  5 ),  ( 3 ,  4 ),  ( 3 ,  4 ),  ( 2 ,  5 ),  ( 2 ,  5 ),  ( 2 ,  5 ),  ( 2 ,  5 ),  ( 2 ,  5 ),  ( 2 ,  5 ),  ( 2 ,  5 ),  ( 4 ,  3 ),  ( 4 ,  3 ),  ( 3 ,  4 ),  ( 3 ,  4 ),  ( 4 ,  3 ),  (2, 10), \n(11, 1), \n(7, 5), \n(7, 5), \n(7, 5), \n(11, 1), \n(2, 10), \n(7, 5), \n(11, 1), \n(2, 10), \n(11, 1), \n(11, 1), \n(6, 6), \n(10, 2), \n(1, 11), \n(9, 3), \n(9, 3), \n(10, 2), \n(6, 6), \n(1, 11), \n(9, 3), \n(9, 3), \n(5, 7), \n(5, 7), \n(5, 7), \n(5, 7), \n(5, 7), \n(5, 7), \n(5, 7), \n(5, 7), \n(5, 7), \n(7, 5), \n(5, 7), \n(5, 7), \n(7, 5), \n(5, 7), \n(8, 4), \n(5, 7), \n(5, 7), \n(5, 7), \n(7, 5), \n(2, 10), \n(7, 5), \n(6, 6), \n(2, 10), \n(3, 9), \n(5, 7), \n(5, 7), \n(11, 1), \n(3, 9), \n(5, 7), \n(5, 7), \n(11, 1), \n(5, 7), \n(5, 7), \n(3, 9), \n(5, 7), \n(11, 1), \n(5, 7), \n(11, 1), \n(9, 3), \n(7, 5), \n(1, 11), \n(9, 3), \n(9, 3), \n(9, 3), \n(9, 3), \n(9, 3), \n(3, 9), \n(5, 7), \n(2, 10), \n(5, 7), \n(5, 7), \n(5, 7), \n(4, 8), \n(1, 11), \n(9, 3), \n(9, 3), \n(11, 1), \n( 2 ,  10 ),  ( 11 ,  1 ),  ( 7 ,  5 ),  ( 7 ,  5 ),  ( 7 ,  5 ),  ( 11 ,  1 ),  ( 2 ,  10 ),  ( 7 ,  5 ),  ( 11 ,  1 ),  ( 2 ,  10 ),  ( 11 ,  1 ),  ( 11 ,  1 ),  ( 6 ,  6 ),  ( 10 ,  2 ),  ( 1 ,  11 ),  ( 9 ,  3 ),  ( 9 ,  3 ),  ( 10 ,  2 ),  ( 6 ,  6 ),  ( 1 ,  11 ),  ( 9 ,  3 ),  ( 9 ,  3 ),  ( 5 ,  7 ),  ( 5 ,  7 ),  ( 5 ,  7 ),  ( 5 ,  7 ),  ( 5 ,  7 ),  ( 5 ,  7 ),  ( 5 ,  7 ),  ( 5 ,  7 ),  ( 5 ,  7 ),  ( 7 ,  5 ),  ( 5 ,  7 ),  ( 5 ,  7 ),  ( 7 ,  5 ),  ( 5 ,  7 ),  ( 8 ,  4 ),  ( 5 ,  7 ),  ( 5 ,  7 ),  ( 5 ,  7 ),  ( 7 ,  5 ),  ( 2 ,  10 ),  ( 7 ,  5 ),  ( 6 ,  6 ),  ( 2 ,  10 ),  ( 3 ,  9 ),  ( 5 ,  7 ),  ( 5 ,  7 ),  ( 11 ,  1 ),  ( 3 ,  9 ),  ( 5 ,  7 ),  ( 5 ,  7 ),  ( 11 ,  1 ),  ( 5 ,  7 ),  ( 5 ,  7 ),  ( 3 ,  9 ),  ( 5 ,  7 ),  ( 11 ,  1 ),  ( 5 ,  7 ),  ( 11 ,  1 ),  ( 9 ,  3 ),  ( 7 ,  5 ),  ( 1 ,  11 ),  ( 9 ,  3 ),  ( 9 ,  3 ),  ( 9 ,  3 ),  ( 9 ,  3 ),  ( 9 ,  3 ),  ( 3 ,  9 ),  ( 5 ,  7 ),  ( 2 ,  10 ),  ( 5 ,  7 ),  ( 5 ,  7 ),  ( 5 ,  7 ),  ( 4 ,  8 ),  ( 1 ,  11 ),  ( 9 ,  3 ),  ( 9 ,  3 ),  ( 11 ,  1 ),  (2, 6), \n( 2 ,  6 ),  (4, 18), \n(14, 8), \n(40, -18), \n(44, -22), \n(4, 18), \n(14, 8), \n(42, -20), \n(14, 8), \n(22, 0), \n(22, 0), \n(26, -4), \n(12, 10), \n(22, 0), \n(42, -20), \n(40, -18), \n(44, -22), \n(26, -4), \n(40, -18), \n(12, 10), \n(42, -20), \n(12, 10), \n(26, -4), \n(42, -20), \n(44, -22), \n(26, -4), \n(40, -18), \n(42, -20), \n(44, -22), \n(4, 18), \n(12, 10), \n(14, 8), \n(22, 0), \n(26, -4), \n(44, -22), \n(-18, 40), \n(4, 18), \n(14, 8), \n(26, -4), \n(4, 18), \n(12, 10), \n(14, 8), \n(26, -4), \n(-14, 36), \n(-6, 28), \n(4, 18), \n(40, -18), \n(-6, 28), \n(22, 0), \n(-18, 40), \n(-14, 36), \n(-14, 36), \n(12, 10), \n(44, -22), \n(14, 8), \n(22, 0), \n(26, -4), \n(-6, 28), \n(26, -4), \n(-22, 44), \n(12, 10), \n(42, -20), \n(-22, 44), \n(-14, 36), \n(12, 10), \n(14, 8), \n(26, -4), \n(40, -18), \n(4, 18), \n(14, 8), \n(22, 0), \n(26, -4), \n(12, 10), \n(22, 0), \n(40, -18), \n(42, -20), \n(12, 10), \n(44, -22), \n(-14, 36), \n(-6, 28), \n(4, 18), \n(12, 10), \n(14, 8), \n(22, 0), \n(44, -22), \n(4, 18), \n(18, 4), \n(-36, 58), \n(-24, 46), \n(2, 20), \n(18, 4), \n(20, 2), \n(18, 4), \n(20, 2), \n(20, 2), \n(46, -24), \n(20, 2), \n(34, -12), \n(18, 4), \n(20, 2), \n(20, 2), \n(2, 20), \n(4, 18), \n(18, 4), \n(20, 2), \n(-18, 40), \n(4, 18), \n(8, 14), \n(2, 20), \n(4, 18), \n(18, 4), \n(34, -12), \n(4, 18), \n(8, 14), \n(18, 4), \n(20, 2), \n(34, -12), \n(46, -24), \n(-16, 38), \n(18, 4), \n(34, -12), \n(-18, 40), \n(2, 20), \n(8, 14), \n(18, 4), \n(34, -12), \n(8, 14), \n(46, -24), \n(46, -24), \n(-16, 38), \n(2, 20), \n(20, 2), \n(-24, 46), \n(-22, 44), \n(2, 20), \n(34, -12), \n(34, -12), \n(46, -24), \n(-22, 44), \n(20, 2), \n(2, 20), \n(2, 20), \n(4, 18), \n(18, 4), \n(18, 4), \n(34, -12), \n(8, 14), \n(8, 14), \n(18, 4), \n(4, 18), \n(34, -12), \n(-34, 56), \n(-32, 54), \n(-20, 42), \n(-2, 24), \n(22, 0), \n(-2, 24), \n(22, 0), \n(18, 4), \n(22, 0), \n(18, 4), \n(-10, 32), \n(-2, 24), \n(6, 16), \n(18, 4), \n(-2, 24), \n(4, 18), \n(18, 4), \n(22, 0), \n(-20, 42), \n(-2, 24), \n(4, 18), \n(8, 14), \n(-2, 24), \n(4, 18), \n(18, 4), \n(4, 18), \n(6, 16), \n(8, 14), \n(18, 4), \n(-2, 24), \n(18, 4), \n(22, 0), \n(-20, 42), \n(-10, 32), \n(6, 16), \n(8, 14), \n(18, 4), \n(6, 16), \n(8, 14), \n(22, 0), \n(-10, 32), \n(6, 16), \n(-20, 42), \n(-10, 32), \n(-20, 42), \n(-10, 32), \n(-2, 24), \n(4, 18), \n(18, 4), \n(22, 0), \n(-10, 32), \n(-2, 24), \n(18, 4), \n(22, 0), \n(-2, 24), \n(8, 14), \n(8, 14), \n(18, 4), \n(4, 18), \n(22, 0), \n(42, -20), \n(56, -34), \n(56, -34), \n(60, -38), \n(24, -2), \n(24, -2), \n(46, -24), \n(54, -32), \n(56, -34), \n(58, -36), \n(60, -38), \n(6, 16), \n(24, -2), \n(42, -20), \n(54, -32), \n(58, -36), \n(60, -38), \n(24, -2), \n(42, -20), \n(42, -20), \n(60, -38), \n(56, -34), \n(60, -38), \n(8, 14), \n(56, -34), \n(60, -38), \n(-14, 36), \n(0, 22), \n(6, 16), \n(8, 14), \n(46, -24), \n(54, -32), \n(60, -38), \n(56, -34), \n(56, -34), \n(-14, 36), \n(-14, 36), \n(6, 16), \n(8, 14), \n(56, -34), \n(0, 22), \n(6, 16), \n(8, 14), \n(24, -2), \n(46, -24), \n(56, -34), \n(60, -38), \n(6, 16), \n(54, -32), \n(56, -34), \n(58, -36), \n(24, -2), \n(58, -36), \n(42, -20), \n(46, -24), \n(54, -32), \n(56, -34), \n(-14, 36), \n(0, 22), \n(58, -36), \n(24, -2), \n(58, -36), \n(60, -38), \n(24, -2), \n(42, -20), \n(54, -32), \n(8, 14), \n(56, -34), \n(-14, 36), \n(0, 22), \n(24, -2), \n(24, -2), \n(60, -38), \n(20, 2), \n(24, -2), \n(20, 2), \n(24, -2), \n(-10, 32), \n(-4, 26), \n(20, 2), \n(24, -2), \n(20, 2), \n(24, -2), \n(20, 2), \n(20, 2), \n(-8, 30), \n(-6, 28), \n(0, 22), \n(20, 2), \n(-6, 28), \n(-10, 32), \n(0, 22), \n(24, -2), \n(-10, 32), \n(-6, 28), \n(20, 2), \n(-10, 32), \n(24, -2), \n(-10, 32), \n(0, 22), \n(20, 2), \n(24, -2), \n(-10, 32), \n(24, -2), \n(-8, 30), \n(-6, 28), \n(0, 22), \n(24, -2), \n(-10, 32), \n(6, 16), \n(10, 12), \n(2, 20), \n(4, 18), \n(-20, 42), \n(-8, 30), \n(4, 18), \n(10, 12), \n(2, 20), \n(4, 18), \n(-14, 36), \n(-6, 28), \n(0, 22), \n(4, 18), \n(6, 16), \n(-6, 28), \n(10, 12), \n(-20, 42), \n(-14, 36), \n(-10, 32), \n(2, 20), \n(6, 16), \n(10, 12), \n(0, 22), \n(6, 16), \n(10, 12), \n(-10, 32), \n(-6, 28), \n(2, 20), \n(6, 16), \n(10, 12), \n(-20, 42), \n(-10, 32), \n(2, 20), \n(10, 12), \n(-20, 42), \n(-14, 36), \n(-10, 32), \n(0, 22), \n(2, 20), \n(4, 18), \n(-10, 32), \n(10, 12), \n(-14, 36), \n(-8, 30), \n(-6, 28), \n(0, 22), \n(4, 18), \n(-2, 24), \n(6, 16), \n(-2, 24), \n(4, 18), \n(-18, 40), \n(-2, 24), \n(4, 18), \n(-2, 24), \n(4, 18), \n(-14, 36), \n(4, 18), \n(6, 16), \n(-2, 24), \n(-18, 40), \n(-14, 36), \n(6, 16), \n(6, 16), \n(6, 16), \n(-22, 44), \n(-22, 44), \n(-14, 36), \n(-2, 24), \n(4, 18), \n(-2, 24), \n(-2, 24), \n(-14, 36), \n(4, 18), \n(-4, 26), \n(-2, 24), \n(-2, 24), \n(2, 20), \n(-18, 40), \n(-18, 40), \n(-2, 24), \n(-2, 24), \n(2, 20), \n(-2, 24), \n(-18, 40), \n(2, 20), \n(2, 20), \n(-24, 46), \n(2, 20), \n(-2, 24), \n(2, 20), \n(2, 20), \n(-2, 24), \n(-2, 24), \n(10, 12), \n(24, -2), \n(26, -4), \n(16, 6), \n(26, -4), \n(-2, 24), \n(2, 20), \n(26, -4), \n(32, -10), \n(-20, 42), \n(-8, 30), \n(-2, 24), \n(10, 12), \n(26, -4), \n(-2, 24), \n(2, 20), \n(16, 6), \n(26, -4), \n(32, -10), \n(-12, 34), \n(-2, 24), \n(10, 12), \n(-20, 42), \n(2, 20), \n(10, 12), \n(16, 6), \n(32, -10), \n(10, 12), \n(16, 6), \n(24, -2), \n(26, -4), \n(-12, 34), \n(2, 20), \n(10, 12), \n(26, -4), \n(-20, 42), \n(2, 20), \n(10, 12), \n(24, -2), \n(-20, 42), \n(-12, 34), \n(-2, 24), \n(26, -4), \n(32, -10), \n(2, 20), \n(24, -2), \n(26, -4), \n(-2, 24), \n(16, 6), \n(24, -2), \n(32, -10), \n(32, -10), \n(-2, 24), \n(10, 12), \n(16, 6), \n(-8, 30), \n(24, -2), \n(-2, 24), \n(2, 20), \n(4, 18), \n(12, 10), \n(-20, 42), \n(-8, 30), \n(-2, 24), \n(4, 18), \n(10, 12), \n(-2, 24), \n(2, 20), \n(4, 18), \n(12, 10), \n(4, 18), \n(-2, 24), \n(10, 12), \n(-20, 42), \n(2, 20), \n(10, 12), \n(12, 10), \n(10, 12), \n(2, 20), \n(10, 12), \n(-22, 44), \n(-20, 42), \n(2, 20), \n(10, 12), \n(12, 10), \n(-22, 44), \n(-20, 42), \n(-2, 24), \n(12, 10), \n(2, 20), \n(4, 18), \n(-2, 24), \n(12, 10), \n(-2, 24), \n(10, 12), \n(12, 10), \n(-8, 30), \n(4, 18), \n(12, 10), \n(2, 20), \n(-20, 42), \n(-18, 40), \n(-8, 30), \n(-8, 30), \n(2, 20), \n(-14, 36), \n(6, 16), \n(-20, 42), \n(-18, 40), \n(-14, 36), \n(2, 20), \n(6, 16), \n(6, 16), \n(2, 20), \n(6, 16), \n(-22, 44), \n(-20, 42), \n(2, 20), \n(-22, 44), \n(-20, 42), \n(-14, 36), \n(2, 20), \n(-14, 36), \n(-8, 30), \n(4, 18), \n(8, 14), \n(10, 12), \n(2, 20), \n(4, 18), \n(18, 4), \n(0, 22), \n(4, 18), \n(8, 14), \n(18, 4), \n(20, 2), \n(10, 12), \n(18, 4), \n(-10, 32), \n(2, 20), \n(8, 14), \n(10, 12), \n(18, 4), \n(0, 22), \n(8, 14), \n(10, 12), \n(24, -2), \n(-10, 32), \n(2, 20), \n(10, 12), \n(20, 2), \n(-22, 44), \n(-10, 32), \n(2, 20), \n(10, 12), \n(24, -2), \n(-22, 44), \n(-10, 32), \n(0, 22), \n(20, 2), \n(2, 20), \n(4, 18), \n(18, 4), \n(24, -2), \n(-10, 32), \n(18, 4), \n(24, -2), \n(8, 14), \n(10, 12), \n(18, 4), \n(0, 22), \n(4, 18), \n(24, -2), \n(12, 10), \n(14, 8), \n(18, 4), \n(-6, 28), \n(8, 14), \n(18, 4), \n(40, -18), \n(-6, 28), \n(18, 4), \n(8, 14), \n(12, 10), \n(18, 4), \n(8, 14), \n(14, 8), \n(24, -2), \n(-6, 28), \n(12, 10), \n(24, -2), \n(30, -8), \n(30, -8), \n(42, -20), \n(12, 10), \n(14, 8), \n(40, -18), \n(14, 8), \n(18, 4), \n(24, -2), \n(12, 10), \n(18, 4), \n(24, -2), \n(40, -18), \n(42, -20), \n(8, 14), \n(12, 10), \n(18, 4), \n(30, -8), \n(30, -8), \n(-8, 30), \n(-6, 28), \n(12, 10), \n(14, 8), \n(24, -2), \n(-14, 36), \n(-12, 34), \n(4, 18), \n(6, 16), \n(8, 14), \n(18, 4), \n(20, 2), \n(-16, 38), \n(10, 12), \n(18, 4), \n(-14, 36), \n(-10, 32), \n(6, 16), \n(8, 14), \n(10, 12), \n(18, 4), \n(6, 16), \n(8, 14), \n(10, 12), \n(24, -2), \n(-16, 38), \n(-12, 34), \n(-10, 32), \n(6, 16), \n(10, 12), \n(20, 2), \n(-10, 32), \n(10, 12), \n(24, -2), \n(-14, 36), \n(-12, 34), \n(-10, 32), \n(20, 2), \n(4, 18), \n(18, 4), \n(24, -2), \n(-10, 32), \n(18, 4), \n(24, -2), \n(8, 14), \n(10, 12), \n(18, 4), \n(-14, 36), \n(4, 18), \n(24, -2), \n(-16, 38), \n(-6, 28), \n(18, 4), \n(22, 0), \n(34, -12), \n(-18, 40), \n(-14, 36), \n(2, 20), \n(16, 6), \n(18, 4), \n(28, -6), \n(34, -12), \n(14, 8), \n(16, 6), \n(22, 0), \n(28, -6), \n(-16, 38), \n(-12, 34), \n(-6, 28), \n(2, 20), \n(36, -14), \n(-24, 46), \n(2, 20), \n(34, -12), \n(28, -6), \n(34, -12), \n(-14, 36), \n(-12, 34), \n(14, 8), \n(2, 20), \n(4, 18), \n(14, 8), \n(18, 4), \n(22, 0), \n(16, 6), \n(18, 4), \n(22, 0), \n(34, -12), \n(16, 6), \n(18, 4), \n(28, -6), \n(36, -14), \n(-14, 36), \n(-6, 28), \n(4, 18), \n(14, 8), \n(22, 0), \n(34, -12), \n(36, -14), \n(12, 10), \n(28, -6), \n(0, 22), \n(24, -2), \n(28, -6), \n(-16, 38), \n(-12, 34), \n(38, -16), \n(12, 10), \n(24, -2), \n(38, -16), \n(28, -6), \n(-12, 34), \n(0, 22), \n(12, 10), \n(4, 18), \n(24, -2), \n(12, 10), \n(24, -2), \n(12, 10), \n(28, -6), \n(0, 22), \n(4, 18), \n(12, 10), \n(24, -2), \n(6, 16), \n(10, 12), \n(14, 8), \n(16, 6), \n(-12, 34), \n(-10, 32), \n(-6, 28), \n(6, 16), \n(10, 12), \n(20, 2), \n(36, -14), \n(-22, 44), \n(-10, 32), \n(10, 12), \n(12, 10), \n(42, -20), \n(-22, 44), \n(-12, 34), \n(-10, 32), \n(12, 10), \n(14, 8), \n(20, 2), \n(32, -10), \n(40, -18), \n(4, 18), \n(14, 8), \n(-10, 32), \n(12, 10), \n(16, 6), \n(32, -10), \n(40, -18), \n(42, -20), \n(10, 12), \n(12, 10), \n(16, 6), \n(36, -14), \n(-6, 28), \n(4, 18), \n(12, 10), \n(14, 8), \n(36, -14), \n(36, -14), \n(-6, 28), \n(6, 16), \n(-24, 46), \n(12, 10), \n(-2, 24), \n(0, 22), \n(12, 10), \n(14, 8), \n(14, 8), \n(22, 0), \n(-2, 24), \n(12, 10), \n(16, 6), \n(22, 0), \n(-2, 24), \n(8, 14), \n(8, 14), \n(12, 10), \n(16, 6), \n(-6, 28), \n(0, 22), \n(12, 10), \n(14, 8), \n(22, 0), \n(2, 20), \n(12, 10), \n(34, -12), \n(38, -16), \n(28, -6), \n(34, -12), \n(-14, 36), \n(12, 10), \n(20, 2), \n(32, -10), \n(2, 20), \n(12, 10), \n(16, 6), \n(32, -10), \n(34, -12), \n(12, 10), \n(16, 6), \n(28, -6), \n(-14, 36), \n(12, 10), \n(34, -12), \n(42, -20), \n(46, -24), \n(-12, 34), \n(-2, 24), \n(12, 10), \n(20, 2), \n(32, -10), \n(-2, 24), \n(12, 10), \n(32, -10), \n(42, -20), \n(-2, 24), \n(10, 12), \n(12, 10), \n(44, -22), \n(-8, 30), \n(12, 10), \n(44, -22), \n(-20, 42), \n(-12, 34), \n(-6, 28), \n(2, 20), \n(22, 0), \n(24, -2), \n(-10, 32), \n(22, 0), \n(24, -2), \n(32, -10), \n(34, -12), \n(42, -20), \n(8, 14), \n(10, 12), \n(36, -14), \n(44, -22), \n(22, 0), \n(24, -2), \n(34, -12), \n(36, -14), \n(44, -22), \n(-2, 24), \n(18, 4), \n(-2, 24), \n(8, 14), \n(18, 4), \n(0, 22), \n(4, 18), \n(-2, 24), \n(10, 12), \n(0, 22), \n(4, 18), \n(24, -2), \n(-14, 36), \n(-8, 30), \n(-6, 28), \n(4, 18), \n(12, 10), \n(14, 8), \n(14, 8), \n(24, -2), \n( 4 ,  18 ),  ( 14 ,  8 ),  ( 40 ,  -18 ),  ( 44 ,  -22 ),  ( 4 ,  18 ),  ( 14 ,  8 ),  ( 42 ,  -20 ),  ( 14 ,  8 ),  ( 22 ,  0 ),  ( 22 ,  0 ),  ( 26 ,  -4 ),  ( 12 ,  10 ),  ( 22 ,  0 ),  ( 42 ,  -20 ),  ( 40 ,  -18 ),  ( 44 ,  -22 ),  ( 26 ,  -4 ),  ( 40 ,  -18 ),  ( 12 ,  10 ),  ( 42 ,  -20 ),  ( 12 ,  10 ),  ( 26 ,  -4 ),  ( 42 ,  -20 ),  ( 44 ,  -22 ),  ( 26 ,  -4 ),  ( 40 ,  -18 ),  ( 42 ,  -20 ),  ( 44 ,  -22 ),  ( 4 ,  18 ),  ( 12 ,  10 ),  ( 14 ,  8 ),  ( 22 ,  0 ),  ( 26 ,  -4 ),  ( 44 ,  -22 ),  ( -18 ,  40 ),  ( 4 ,  18 ),  ( 14 ,  8 ),  ( 26 ,  -4 ),  ( 4 ,  18 ),  ( 12 ,  10 ),  ( 14 ,  8 ),  ( 26 ,  -4 ),  ( -14 ,  36 ),  ( -6 ,  28 ),  ( 4 ,  18 ),  ( 40 ,  -18 ),  ( -6 ,  28 ),  ( 22 ,  0 ),  ( -18 ,  40 ),  ( -14 ,  36 ),  ( -14 ,  36 ),  ( 12 ,  10 ),  ( 44 ,  -22 ),  ( 14 ,  8 ),  ( 22 ,  0 ),  ( 26 ,  -4 ),  ( -6 ,  28 ),  ( 26 ,  -4 ),  ( -22 ,  44 ),  ( 12 ,  10 ),  ( 42 ,  -20 ),  ( -22 ,  44 ),  ( -14 ,  36 ),  ( 12 ,  10 ),  ( 14 ,  8 ),  ( 26 ,  -4 ),  ( 40 ,  -18 ),  ( 4 ,  18 ),  ( 14 ,  8 ),  ( 22 ,  0 ),  ( 26 ,  -4 ),  ( 12 ,  10 ),  ( 22 ,  0 ),  ( 40 ,  -18 ),  ( 42 ,  -20 ),  ( 12 ,  10 ),  ( 44 ,  -22 ),  ( -14 ,  36 ),  ( -6 ,  28 ),  ( 4 ,  18 ),  ( 12 ,  10 ),  ( 14 ,  8 ),  ( 22 ,  0 ),  ( 44 ,  -22 ),  ( 4 ,  18 ),  ( 18 ,  4 ),  ( -36 ,  58 ),  ( -24 ,  46 ),  ( 2 ,  20 ),  ( 18 ,  4 ),  ( 20 ,  2 ),  ( 18 ,  4 ),  ( 20 ,  2 ),  ( 20 ,  2 ),  ( 46 ,  -24 ),  ( 20 ,  2 ),  ( 34 ,  -12 ),  ( 18 ,  4 ),  ( 20 ,  2 ),  ( 20 ,  2 ),  ( 2 ,  20 ),  ( 4 ,  18 ),  ( 18 ,  4 ),  ( 20 ,  2 ),  ( -18 ,  40 ),  ( 4 ,  18 ),  ( 8 ,  14 ),  ( 2 ,  20 ),  ( 4 ,  18 ),  ( 18 ,  4 ),  ( 34 ,  -12 ),  ( 4 ,  18 ),  ( 8 ,  14 ),  ( 18 ,  4 ),  ( 20 ,  2 ),  ( 34 ,  -12 ),  ( 46 ,  -24 ),  ( -16 ,  38 ),  ( 18 ,  4 ),  ( 34 ,  -12 ),  ( -18 ,  40 ),  ( 2 ,  20 ),  ( 8 ,  14 ),  ( 18 ,  4 ),  ( 34 ,  -12 ),  ( 8 ,  14 ),  ( 46 ,  -24 ),  ( 46 ,  -24 ),  ( -16 ,  38 ),  ( 2 ,  20 ),  ( 20 ,  2 ),  ( -24 ,  46 ),  ( -22 ,  44 ),  ( 2 ,  20 ),  ( 34 ,  -12 ),  ( 34 ,  -12 ),  ( 46 ,  -24 ),  ( -22 ,  44 ),  ( 20 ,  2 ),  ( 2 ,  20 ),  ( 2 ,  20 ),  ( 4 ,  18 ),  ( 18 ,  4 ),  ( 18 ,  4 ),  ( 34 ,  -12 ),  ( 8 ,  14 ),  ( 8 ,  14 ),  ( 18 ,  4 ),  ( 4 ,  18 ),  ( 34 ,  -12 ),  ( -34 ,  56 ),  ( -32 ,  54 ),  ( -20 ,  42 ),  ( -2 ,  24 ),  ( 22 ,  0 ),  ( -2 ,  24 ),  ( 22 ,  0 ),  ( 18 ,  4 ),  ( 22 ,  0 ),  ( 18 ,  4 ),  ( -10 ,  32 ),  ( -2 ,  24 ),  ( 6 ,  16 ),  ( 18 ,  4 ),  ( -2 ,  24 ),  ( 4 ,  18 ),  ( 18 ,  4 ),  ( 22 ,  0 ),  ( -20 ,  42 ),  ( -2 ,  24 ),  ( 4 ,  18 ),  ( 8 ,  14 ),  ( -2 ,  24 ),  ( 4 ,  18 ),  ( 18 ,  4 ),  ( 4 ,  18 ),  ( 6 ,  16 ),  ( 8 ,  14 ),  ( 18 ,  4 ),  ( -2 ,  24 ),  ( 18 ,  4 ),  ( 22 ,  0 ),  ( -20 ,  42 ),  ( -10 ,  32 ),  ( 6 ,  16 ),  ( 8 ,  14 ),  ( 18 ,  4 ),  ( 6 ,  16 ),  ( 8 ,  14 ),  ( 22 ,  0 ),  ( -10 ,  32 ),  ( 6 ,  16 ),  ( -20 ,  42 ),  ( -10 ,  32 ),  ( -20 ,  42 ),  ( -10 ,  32 ),  ( -2 ,  24 ),  ( 4 ,  18 ),  ( 18 ,  4 ),  ( 22 ,  0 ),  ( -10 ,  32 ),  ( -2 ,  24 ),  ( 18 ,  4 ),  ( 22 ,  0 ),  ( -2 ,  24 ),  ( 8 ,  14 ),  ( 8 ,  14 ),  ( 18 ,  4 ),  ( 4 ,  18 ),  ( 22 ,  0 ),  ( 42 ,  -20 ),  ( 56 ,  -34 ),  ( 56 ,  -34 ),  ( 60 ,  -38 ),  ( 24 ,  -2 ),  ( 24 ,  -2 ),  ( 46 ,  -24 ),  ( 54 ,  -32 ),  ( 56 ,  -34 ),  ( 58 ,  -36 ),  ( 60 ,  -38 ),  ( 6 ,  16 ),  ( 24 ,  -2 ),  ( 42 ,  -20 ),  ( 54 ,  -32 ),  ( 58 ,  -36 ),  ( 60 ,  -38 ),  ( 24 ,  -2 ),  ( 42 ,  -20 ),  ( 42 ,  -20 ),  ( 60 ,  -38 ),  ( 56 ,  -34 ),  ( 60 ,  -38 ),  ( 8 ,  14 ),  ( 56 ,  -34 ),  ( 60 ,  -38 ),  ( -14 ,  36 ),  ( 0 ,  22 ),  ( 6 ,  16 ),  ( 8 ,  14 ),  ( 46 ,  -24 ),  ( 54 ,  -32 ),  ( 60 ,  -38 ),  ( 56 ,  -34 ),  ( 56 ,  -34 ),  ( -14 ,  36 ),  ( -14 ,  36 ),  ( 6 ,  16 ),  ( 8 ,  14 ),  ( 56 ,  -34 ),  ( 0 ,  22 ),  ( 6 ,  16 ),  ( 8 ,  14 ),  ( 24 ,  -2 ),  ( 46 ,  -24 ),  ( 56 ,  -34 ),  ( 60 ,  -38 ),  ( 6 ,  16 ),  ( 54 ,  -32 ),  ( 56 ,  -34 ),  ( 58 ,  -36 ),  ( 24 ,  -2 ),  ( 58 ,  -36 ),  ( 42 ,  -20 ),  ( 46 ,  -24 ),  ( 54 ,  -32 ),  ( 56 ,  -34 ),  ( -14 ,  36 ),  ( 0 ,  22 ),  ( 58 ,  -36 ),  ( 24 ,  -2 ),  ( 58 ,  -36 ),  ( 60 ,  -38 ),  ( 24 ,  -2 ),  ( 42 ,  -20 ),  ( 54 ,  -32 ),  ( 8 ,  14 ),  ( 56 ,  -34 ),  ( -14 ,  36 ),  ( 0 ,  22 ),  ( 24 ,  -2 ),  ( 24 ,  -2 ),  ( 60 ,  -38 ),  ( 20 ,  2 ),  ( 24 ,  -2 ),  ( 20 ,  2 ),  ( 24 ,  -2 ),  ( -10 ,  32 ),  ( -4 ,  26 ),  ( 20 ,  2 ),  ( 24 ,  -2 ),  ( 20 ,  2 ),  ( 24 ,  -2 ),  ( 20 ,  2 ),  ( 20 ,  2 ),  ( -8 ,  30 ),  ( -6 ,  28 ),  ( 0 ,  22 ),  ( 20 ,  2 ),  ( -6 ,  28 ),  ( -10 ,  32 ),  ( 0 ,  22 ),  ( 24 ,  -2 ),  ( -10 ,  32 ),  ( -6 ,  28 ),  ( 20 ,  2 ),  ( -10 ,  32 ),  ( 24 ,  -2 ),  ( -10 ,  32 ),  ( 0 ,  22 ),  ( 20 ,  2 ),  ( 24 ,  -2 ),  ( -10 ,  32 ),  ( 24 ,  -2 ),  ( -8 ,  30 ),  ( -6 ,  28 ),  ( 0 ,  22 ),  ( 24 ,  -2 ),  ( -10 ,  32 ),  ( 6 ,  16 ),  ( 10 ,  12 ),  ( 2 ,  20 ),  ( 4 ,  18 ),  ( -20 ,  42 ),  ( -8 ,  30 ),  ( 4 ,  18 ),  ( 10 ,  12 ),  ( 2 ,  20 ),  ( 4 ,  18 ),  ( -14 ,  36 ),  ( -6 ,  28 ),  ( 0 ,  22 ),  ( 4 ,  18 ),  ( 6 ,  16 ),  ( -6 ,  28 ),  ( 10 ,  12 ),  ( -20 ,  42 ),  ( -14 ,  36 ),  ( -10 ,  32 ),  ( 2 ,  20 ),  ( 6 ,  16 ),  ( 10 ,  12 ),  ( 0 ,  22 ),  ( 6 ,  16 ),  ( 10 ,  12 ),  ( -10 ,  32 ),  ( -6 ,  28 ),  ( 2 ,  20 ),  ( 6 ,  16 ),  ( 10 ,  12 ),  ( -20 ,  42 ),  ( -10 ,  32 ),  ( 2 ,  20 ),  ( 10 ,  12 ),  ( -20 ,  42 ),  ( -14 ,  36 ),  ( -10 ,  32 ),  ( 0 ,  22 ),  ( 2 ,  20 ),  ( 4 ,  18 ),  ( -10 ,  32 ),  ( 10 ,  12 ),  ( -14 ,  36 ),  ( -8 ,  30 ),  ( -6 ,  28 ),  ( 0 ,  22 ),  ( 4 ,  18 ),  ( -2 ,  24 ),  ( 6 ,  16 ),  ( -2 ,  24 ),  ( 4 ,  18 ),  ( -18 ,  40 ),  ( -2 ,  24 ),  ( 4 ,  18 ),  ( -2 ,  24 ),  ( 4 ,  18 ),  ( -14 ,  36 ),  ( 4 ,  18 ),  ( 6 ,  16 ),  ( -2 ,  24 ),  ( -18 ,  40 ),  ( -14 ,  36 ),  ( 6 ,  16 ),  ( 6 ,  16 ),  ( 6 ,  16 ),  ( -22 ,  44 ),  ( -22 ,  44 ),  ( -14 ,  36 ),  ( -2 ,  24 ),  ( 4 ,  18 ),  ( -2 ,  24 ),  ( -2 ,  24 ),  ( -14 ,  36 ),  ( 4 ,  18 ),  ( -4 ,  26 ),  ( -2 ,  24 ),  ( -2 ,  24 ),  ( 2 ,  20 ),  ( -18 ,  40 ),  ( -18 ,  40 ),  ( -2 ,  24 ),  ( -2 ,  24 ),  ( 2 ,  20 ),  ( -2 ,  24 ),  ( -18 ,  40 ),  ( 2 ,  20 ),  ( 2 ,  20 ),  ( -24 ,  46 ),  ( 2 ,  20 ),  ( -2 ,  24 ),  ( 2 ,  20 ),  ( 2 ,  20 ),  ( -2 ,  24 ),  ( -2 ,  24 ),  ( 10 ,  12 ),  ( 24 ,  -2 ),  ( 26 ,  -4 ),  ( 16 ,  6 ),  ( 26 ,  -4 ),  ( -2 ,  24 ),  ( 2 ,  20 ),  ( 26 ,  -4 ),  ( 32 ,  -10 ),  ( -20 ,  42 ),  ( -8 ,  30 ),  ( -2 ,  24 ),  ( 10 ,  12 ),  ( 26 ,  -4 ),  ( -2 ,  24 ),  ( 2 ,  20 ),  ( 16 ,  6 ),  ( 26 ,  -4 ),  ( 32 ,  -10 ),  ( -12 ,  34 ),  ( -2 ,  24 ),  ( 10 ,  12 ),  ( -20 ,  42 ),  ( 2 ,  20 ),  ( 10 ,  12 ),  ( 16 ,  6 ),  ( 32 ,  -10 ),  ( 10 ,  12 ),  ( 16 ,  6 ),  ( 24 ,  -2 ),  ( 26 ,  -4 ),  ( -12 ,  34 ),  ( 2 ,  20 ),  ( 10 ,  12 ),  ( 26 ,  -4 ),  ( -20 ,  42 ),  ( 2 ,  20 ),  ( 10 ,  12 ),  ( 24 ,  -2 ),  ( -20 ,  42 ),  ( -12 ,  34 ),  ( -2 ,  24 ),  ( 26 ,  -4 ),  ( 32 ,  -10 ),  ( 2 ,  20 ),  ( 24 ,  -2 ),  ( 26 ,  -4 ),  ( -2 ,  24 ),  ( 16 ,  6 ),  ( 24 ,  -2 ),  ( 32 ,  -10 ),  ( 32 ,  -10 ),  ( -2 ,  24 ),  ( 10 ,  12 ),  ( 16 ,  6 ),  ( -8 ,  30 ),  ( 24 ,  -2 ),  ( -2 ,  24 ),  ( 2 ,  20 ),  ( 4 ,  18 ),  ( 12 ,  10 ),  ( -20 ,  42 ),  ( -8 ,  30 ),  ( -2 ,  24 ),  ( 4 ,  18 ),  ( 10 ,  12 ),  ( -2 ,  24 ),  ( 2 ,  20 ),  ( 4 ,  18 ),  ( 12 ,  10 ),  ( 4 ,  18 ),  ( -2 ,  24 ),  ( 10 ,  12 ),  ( -20 ,  42 ),  ( 2 ,  20 ),  ( 10 ,  12 ),  ( 12 ,  10 ),  ( 10 ,  12 ),  ( 2 ,  20 ),  ( 10 ,  12 ),  ( -22 ,  44 ),  ( -20 ,  42 ),  ( 2 ,  20 ),  ( 10 ,  12 ),  ( 12 ,  10 ),  ( -22 ,  44 ),  ( -20 ,  42 ),  ( -2 ,  24 ),  ( 12 ,  10 ),  ( 2 ,  20 ),  ( 4 ,  18 ),  ( -2 ,  24 ),  ( 12 ,  10 ),  ( -2 ,  24 ),  ( 10 ,  12 ),  ( 12 ,  10 ),  ( -8 ,  30 ),  ( 4 ,  18 ),  ( 12 ,  10 ),  ( 2 ,  20 ),  ( -20 ,  42 ),  ( -18 ,  40 ),  ( -8 ,  30 ),  ( -8 ,  30 ),  ( 2 ,  20 ),  ( -14 ,  36 ),  ( 6 ,  16 ),  ( -20 ,  42 ),  ( -18 ,  40 ),  ( -14 ,  36 ),  ( 2 ,  20 ),  ( 6 ,  16 ),  ( 6 ,  16 ),  ( 2 ,  20 ),  ( 6 ,  16 ),  ( -22 ,  44 ),  ( -20 ,  42 ),  ( 2 ,  20 ),  ( -22 ,  44 ),  ( -20 ,  42 ),  ( -14 ,  36 ),  ( 2 ,  20 ),  ( -14 ,  36 ),  ( -8 ,  30 ),  ( 4 ,  18 ),  ( 8 ,  14 ),  ( 10 ,  12 ),  ( 2 ,  20 ),  ( 4 ,  18 ),  ( 18 ,  4 ),  ( 0 ,  22 ),  ( 4 ,  18 ),  ( 8 ,  14 ),  ( 18 ,  4 ),  ( 20 ,  2 ),  ( 10 ,  12 ),  ( 18 ,  4 ),  ( -10 ,  32 ),  ( 2 ,  20 ),  ( 8 ,  14 ),  ( 10 ,  12 ),  ( 18 ,  4 ),  ( 0 ,  22 ),  ( 8 ,  14 ),  ( 10 ,  12 ),  ( 24 ,  -2 ),  ( -10 ,  32 ),  ( 2 ,  20 ),  ( 10 ,  12 ),  ( 20 ,  2 ),  ( -22 ,  44 ),  ( -10 ,  32 ),  ( 2 ,  20 ),  ( 10 ,  12 ),  ( 24 ,  -2 ),  ( -22 ,  44 ),  ( -10 ,  32 ),  ( 0 ,  22 ),  ( 20 ,  2 ),  ( 2 ,  20 ),  ( 4 ,  18 ),  ( 18 ,  4 ),  ( 24 ,  -2 ),  ( -10 ,  32 ),  ( 18 ,  4 ),  ( 24 ,  -2 ),  ( 8 ,  14 ),  ( 10 ,  12 ),  ( 18 ,  4 ),  ( 0 ,  22 ),  ( 4 ,  18 ),  ( 24 ,  -2 ),  ( 12 ,  10 ),  ( 14 ,  8 ),  ( 18 ,  4 ),  ( -6 ,  28 ),  ( 8 ,  14 ),  ( 18 ,  4 ),  ( 40 ,  -18 ),  ( -6 ,  28 ),  ( 18 ,  4 ),  ( 8 ,  14 ),  ( 12 ,  10 ),  ( 18 ,  4 ),  ( 8 ,  14 ),  ( 14 ,  8 ),  ( 24 ,  -2 ),  ( -6 ,  28 ),  ( 12 ,  10 ),  ( 24 ,  -2 ),  ( 30 ,  -8 ),  ( 30 ,  -8 ),  ( 42 ,  -20 ),  ( 12 ,  10 ),  ( 14 ,  8 ),  ( 40 ,  -18 ),  ( 14 ,  8 ),  ( 18 ,  4 ),  ( 24 ,  -2 ),  ( 12 ,  10 ),  ( 18 ,  4 ),  ( 24 ,  -2 ),  ( 40 ,  -18 ),  ( 42 ,  -20 ),  ( 8 ,  14 ),  ( 12 ,  10 ),  ( 18 ,  4 ),  ( 30 ,  -8 ),  ( 30 ,  -8 ),  ( -8 ,  30 ),  ( -6 ,  28 ),  ( 12 ,  10 ),  ( 14 ,  8 ),  ( 24 ,  -2 ),  ( -14 ,  36 ),  ( -12 ,  34 ),  ( 4 ,  18 ),  ( 6 ,  16 ),  ( 8 ,  14 ),  ( 18 ,  4 ),  ( 20 ,  2 ),  ( -16 ,  38 ),  ( 10 ,  12 ),  ( 18 ,  4 ),  ( -14 ,  36 ),  ( -10 ,  32 ),  ( 6 ,  16 ),  ( 8 ,  14 ),  ( 10 ,  12 ),  ( 18 ,  4 ),  ( 6 ,  16 ),  ( 8 ,  14 ),  ( 10 ,  12 ),  ( 24 ,  -2 ),  ( -16 ,  38 ),  ( -12 ,  34 ),  ( -10 ,  32 ),  ( 6 ,  16 ),  ( 10 ,  12 ),  ( 20 ,  2 ),  ( -10 ,  32 ),  ( 10 ,  12 ),  ( 24 ,  -2 ),  ( -14 ,  36 ),  ( -12 ,  34 ),  ( -10 ,  32 ),  ( 20 ,  2 ),  ( 4 ,  18 ),  ( 18 ,  4 ),  ( 24 ,  -2 ),  ( -10 ,  32 ),  ( 18 ,  4 ),  ( 24 ,  -2 ),  ( 8 ,  14 ),  ( 10 ,  12 ),  ( 18 ,  4 ),  ( -14 ,  36 ),  ( 4 ,  18 ),  ( 24 ,  -2 ),  ( -16 ,  38 ),  ( -6 ,  28 ),  ( 18 ,  4 ),  ( 22 ,  0 ),  ( 34 ,  -12 ),  ( -18 ,  40 ),  ( -14 ,  36 ),  ( 2 ,  20 ),  ( 16 ,  6 ),  ( 18 ,  4 ),  ( 28 ,  -6 ),  ( 34 ,  -12 ),  ( 14 ,  8 ),  ( 16 ,  6 ),  ( 22 ,  0 ),  ( 28 ,  -6 ),  ( -16 ,  38 ),  ( -12 ,  34 ),  ( -6 ,  28 ),  ( 2 ,  20 ),  ( 36 ,  -14 ),  ( -24 ,  46 ),  ( 2 ,  20 ),  ( 34 ,  -12 ),  ( 28 ,  -6 ),  ( 34 ,  -12 ),  ( -14 ,  36 ),  ( -12 ,  34 ),  ( 14 ,  8 ),  ( 2 ,  20 ),  ( 4 ,  18 ),  ( 14 ,  8 ),  ( 18 ,  4 ),  ( 22 ,  0 ),  ( 16 ,  6 ),  ( 18 ,  4 ),  ( 22 ,  0 ),  ( 34 ,  -12 ),  ( 16 ,  6 ),  ( 18 ,  4 ),  ( 28 ,  -6 ),  ( 36 ,  -14 ),  ( -14 ,  36 ),  ( -6 ,  28 ),  ( 4 ,  18 ),  ( 14 ,  8 ),  ( 22 ,  0 ),  ( 34 ,  -12 ),  ( 36 ,  -14 ),  ( 12 ,  10 ),  ( 28 ,  -6 ),  ( 0 ,  22 ),  ( 24 ,  -2 ),  ( 28 ,  -6 ),  ( -16 ,  38 ),  ( -12 ,  34 ),  ( 38 ,  -16 ),  ( 12 ,  10 ),  ( 24 ,  -2 ),  ( 38 ,  -16 ),  ( 28 ,  -6 ),  ( -12 ,  34 ),  ( 0 ,  22 ),  ( 12 ,  10 ),  ( 4 ,  18 ),  ( 24 ,  -2 ),  ( 12 ,  10 ),  ( 24 ,  -2 ),  ( 12 ,  10 ),  ( 28 ,  -6 ),  ( 0 ,  22 ),  ( 4 ,  18 ),  ( 12 ,  10 ),  ( 24 ,  -2 ),  ( 6 ,  16 ),  ( 10 ,  12 ),  ( 14 ,  8 ),  ( 16 ,  6 ),  ( -12 ,  34 ),  ( -10 ,  32 ),  ( -6 ,  28 ),  ( 6 ,  16 ),  ( 10 ,  12 ),  ( 20 ,  2 ),  ( 36 ,  -14 ),  ( -22 ,  44 ),  ( -10 ,  32 ),  ( 10 ,  12 ),  ( 12 ,  10 ),  ( 42 ,  -20 ),  ( -22 ,  44 ),  ( -12 ,  34 ),  ( -10 ,  32 ),  ( 12 ,  10 ),  ( 14 ,  8 ),  ( 20 ,  2 ),  ( 32 ,  -10 ),  ( 40 ,  -18 ),  ( 4 ,  18 ),  ( 14 ,  8 ),  ( -10 ,  32 ),  ( 12 ,  10 ),  ( 16 ,  6 ),  ( 32 ,  -10 ),  ( 40 ,  -18 ),  ( 42 ,  -20 ),  ( 10 ,  12 ),  ( 12 ,  10 ),  ( 16 ,  6 ),  ( 36 ,  -14 ),  ( -6 ,  28 ),  ( 4 ,  18 ),  ( 12 ,  10 ),  ( 14 ,  8 ),  ( 36 ,  -14 ),  ( 36 ,  -14 ),  ( -6 ,  28 ),  ( 6 ,  16 ),  ( -24 ,  46 ),  ( 12 ,  10 ),  ( -2 ,  24 ),  ( 0 ,  22 ),  ( 12 ,  10 ),  ( 14 ,  8 ),  ( 14 ,  8 ),  ( 22 ,  0 ),  ( -2 ,  24 ),  ( 12 ,  10 ),  ( 16 ,  6 ),  ( 22 ,  0 ),  ( -2 ,  24 ),  ( 8 ,  14 ),  ( 8 ,  14 ),  ( 12 ,  10 ),  ( 16 ,  6 ),  ( -6 ,  28 ),  ( 0 ,  22 ),  ( 12 ,  10 ),  ( 14 ,  8 ),  ( 22 ,  0 ),  ( 2 ,  20 ),  ( 12 ,  10 ),  ( 34 ,  -12 ),  ( 38 ,  -16 ),  ( 28 ,  -6 ),  ( 34 ,  -12 ),  ( -14 ,  36 ),  ( 12 ,  10 ),  ( 20 ,  2 ),  ( 32 ,  -10 ),  ( 2 ,  20 ),  ( 12 ,  10 ),  ( 16 ,  6 ),  ( 32 ,  -10 ),  ( 34 ,  -12 ),  ( 12 ,  10 ),  ( 16 ,  6 ),  ( 28 ,  -6 ),  ( -14 ,  36 ),  ( 12 ,  10 ),  ( 34 ,  -12 ),  ( 42 ,  -20 ),  ( 46 ,  -24 ),  ( -12 ,  34 ),  ( -2 ,  24 ),  ( 12 ,  10 ),  ( 20 ,  2 ),  ( 32 ,  -10 ),  ( -2 ,  24 ),  ( 12 ,  10 ),  ( 32 ,  -10 ),  ( 42 ,  -20 ),  ( -2 ,  24 ),  ( 10 ,  12 ),  ( 12 ,  10 ),  ( 44 ,  -22 ),  ( -8 ,  30 ),  ( 12 ,  10 ),  ( 44 ,  -22 ),  ( -20 ,  42 ),  ( -12 ,  34 ),  ( -6 ,  28 ),  ( 2 ,  20 ),  ( 22 ,  0 ),  ( 24 ,  -2 ),  ( -10 ,  32 ),  ( 22 ,  0 ),  ( 24 ,  -2 ),  ( 32 ,  -10 ),  ( 34 ,  -12 ),  ( 42 ,  -20 ),  ( 8 ,  14 ),  ( 10 ,  12 ),  ( 36 ,  -14 ),  ( 44 ,  -22 ),  ( 22 ,  0 ),  ( 24 ,  -2 ),  ( 34 ,  -12 ),  ( 36 ,  -14 ),  ( 44 ,  -22 ),  ( -2 ,  24 ),  ( 18 ,  4 ),  ( -2 ,  24 ),  ( 8 ,  14 ),  ( 18 ,  4 ),  ( 0 ,  22 ),  ( 4 ,  18 ),  ( -2 ,  24 ),  ( 10 ,  12 ),  ( 0 ,  22 ),  ( 4 ,  18 ),  ( 24 ,  -2 ),  ( -14 ,  36 ),  ( -8 ,  30 ),  ( -6 ,  28 ),  ( 4 ,  18 ),  ( 12 ,  10 ),  ( 14 ,  8 ),  ( 14 ,  8 ),  ( 24 ,  -2 ),  (5, 10), \n(14, 1), \n(5, 10), \n(11, 4), \n(5, 10), \n(8, 7), \n(6, 9), \n(8, 7), \n(5, 10), \n(14, 1), \n(6, 9), \n(14, 1), \n(6, 9), \n(5, 10), \n(11, 4), \n(8, 7), \n(11, 4), \n(14, 1), \n(5, 10), \n(6, 9), \n(11, 4), \n(14, 1), \n(11, 4), \n(6, 9), \n(5, 10), \n(14, 1), \n(8, 7), \n(5, 10), \n(10, 5), \n(11, 4), \n(5, 10), \n(1, 14), \n(12, 3), \n(5, 10), \n(5, 10), \n(11, 4), \n(10, 5), \n(1, 14), \n(11, 4), \n(1, 14), \n(5, 10), \n(11, 4), \n(11, 4), \n(12, 3), \n(5, 10), \n(10, 5), \n(12, 3), \n(5, 10), \n(12, 3), \n(5, 10), \n(2, 13), \n(5, 10), \n(2, 13), \n(2, 13), \n(4, 11), \n(10, 5), \n(4, 11), \n(5, 10), \n(12, 3), \n(4, 11), \n(5, 10), \n(10, 5), \n(12, 3), \n(7, 8), \n(7, 8), \n(10, 5), \n(7, 8), \n(10, 5), \n(9, 6), \n(9, 6), \n(7, 8), \n(8, 7), \n(7, 8), \n(8, 7), \n(14, 1), \n(3, 12), \n(14, 1), \n(2, 13), \n(2, 13), \n(3, 12), \n(2, 13), \n(14, 1), \n(14, 1), \n(3, 12), \n(12, 3), \n(12, 3), \n(14, 1), \n(10, 5), \n(1, 14), \n(1, 14), \n(10, 5), \n(6, 9), \n(6, 9), \n(6, 9), \n(6, 9), \n(12, 3), \n(12, 3), \n(9, 6), \n(1, 14), \n(1, 14), \n(13, 2), \n(6, 9), \n(6, 9), \n(8, 7), \n(10, 5), \n(10, 5), \n(8, 7), \n(2, 13), \n(4, 11), \n(4, 11), \n(12, 3), \n(4, 11), \n(12, 3), \n(7, 8), \n(11, 4), \n(5, 10), \n(11, 4), \n(11, 4), \n(5, 10), \n(1, 14), \n(4, 11), \n(14, 1), \n(4, 11), \n(14, 1), \n(8, 7), \n(11, 4), \n(4, 11), \n(10, 5), \n(14, 1), \n(4, 11), \n(12, 3), \nesults: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS"
    },
    {
        "stdout": "#Results: 9, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "ADD_1_TO_A_GIVEN_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PATH_MAXIMUM_AVERAGE_VALUE"
    },
    {
        "stdout": "#Results: 11, 11\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "PROGRAM_PRINT_IDENTITY_MATRIX_1"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SPLIT_ARRAY_ADD_FIRST_PART_END"
    },
    {
        "stdout": "Triplet is 28 , 6 , -16\nTriplet is 28 ,  6 ,  -16\nTriplet is 19 , 6 , 4\nTriplet is 19 ,  6 ,  4\nTriplet is 40 , -76 , 54\nTriplet is 40 ,  -76 ,  54\n#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE"
    },
    {
        "stdout": "The third Largest element is 42\nThe third Largest element is 42\nThe third Largest element is 54\nThe third Largest element is 54\nThe third Largest element is 1\nThe third Largest element is 1\nThe third Largest element is 88\nThe third Largest element is 88\nThe third Largest element is 38\nThe third Largest element is 38\nThe third Largest element is 1\nThe third Largest element is 1\nInvalid Input\n Invalid Input \nThe third Largest element is 74\nThe third Largest element is 74\nThe third Largest element is 1\nThe third Largest element is 1\nThe third Largest element is 93\nThe third Largest element is 93\n#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT.py\", line 67, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT.py\", line 34, in f_filled\n    cur_max = arr[0], max_so_far = arr[0]\nTypeError: cannot unpack non-iterable int object\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_YY_N_2_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "TRIANGULAR_NUMBERS"
    },
    {
        "stdout": "#Results: 11, 11\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_THE_ELEMENT_THAT_APPEARS_ONCE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_OCTAL_DECIMAL_CONVERSION"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "C_PROGRAM_FACTORIAL_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MEDIAN_OF_TWO_SORTED_ARRAYS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DIFFERENT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_POINTS_INTERSECTION_N_CIRCLES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "LEONARDO_NUMBER_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "RECURSIVE_INSERTION_SORT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING"
    },
    {
        "stdout": "",
        "stderr": "loop",
        "state": "Loop",
        "WhyError": "Loop_",
        "filename": "SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B"
    },
    {
        "stdout": "#Results: 9, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CONCENTRIC_CIRCLES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "NUMBER_SUBSTRINGS_STRING"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SEQUENCE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SQUARE_ROOT_OF_AN_INTEGER"
    },
    {
        "stdout": "#Results: 9, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "MAXIMUM_PRODUCT_SUBSET_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PRINT_MAXIMUM_SHORTEST_DISTANCE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1"
    },
    {
        "stdout": "#Results: 6, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "LONGEST_REPEATED_SUBSEQUENCE_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "HIGHWAY_BILLBOARD_PROBLEM"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS"
    },
    {
        "stdout": "#Results: 5, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1"
    },
    {
        "stdout": "#Results: 3, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQUE"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/LONGEST_PREFIX_ALSO_SUFFIX_1.py\", line 70, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/LONGEST_PREFIX_ALSO_SUFFIX_1.py\", line 34, in f_filled\n    n = len(s)\nUnboundLocalError: local variable 'len' referenced before assignment\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "LONGEST_PREFIX_ALSO_SUFFIX_1"
    },
    {
        "stdout": "#Results: 2, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_PAIRS_DIFFERENCE_EQUAL_K_1"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/REMAINDER_7_LARGE_NUMBERS.py\", line 54, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/REMAINDER_7_LARGE_NUMBERS.py\", line 29, in f_filled\n    digit = int(num[i]) - 48\nValueError: invalid literal for int() with base 10: 'K'\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "REMAINDER_7_LARGE_NUMBERS"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED.py\", line 60, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED.py\", line 40, in f_filled\n    dp[i] = arr[i] + min(min(dp[i - 1], dp[i - 2]), min(dp[i - 3], dp[i - 4]))\nIndexError: list assignment index out of range\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED"
    },
    {
        "stdout": "The third Largest element is 9223372036854775807\nThe Third Largest element is 58\nThe third Largest element is 9223372036854775807\nThe Third Largest element is 58\nThe third Largest element is 9223372036854775807\nThe Third Largest element is -9223372036854775807\nThe third Largest element is 9223372036854775807\nThe Third Largest element is 77\nInvalid Input\n Invalid Input \nInvalid Input\n Invalid Input \nThe third Largest element is 9223372036854775807\nThe Third Largest element is 89\nThe third Largest element is 9223372036854775807\nThe Third Largest element is 88\nThe third Largest element is 9223372036854775807\nThe Third Largest element is -9223372036854775807\nThe third Largest element is 9223372036854775807\nThe Third Largest element is 88\n#Results: 2, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN"
    },
    {
        "stdout": "20 20 67 -54 22 -42 -22 -48 -20 34 -50 -22 -30 -94 -54 22 -42 -22 -48 -20 34 -50 -22 -30 -94 62 -24 70 -54 -38 84 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 62 20 8 18 54 64 88 74 58 30 96 4 24 67 99 53 35 61 85 9 45 93 65 87 99 31 77 69 62 20 8 18 54 64 88 74 58 30 96 4 24 67 99 53 35 61 85 9 45 93 65 87 99 31 77 69 54 88 43 84 62 34 93 -28 -6 -28 -6 18 42 98 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 10 42 10 42 46 88 4 -88 2 -16 -74 -18 -60 86 88 -2 82 -8 54 -84 -4 32 88 4 -88 2 -16 -74 -18 -60 86 88 -2 82 -8 54 -84 -4 32 20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 80 52 56 68 48 40 64 44 4 20 69 9 97 73 25 80 52 56 68 48 40 64 44 4 20 69 9 97 73 25 66 46 64 72 79 24 #Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SEGREGATE_EVEN_ODD_NUMBERS_SET_3"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE.py\", line 56, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE.py\", line 28, in f_filled\n    min = getMin(arr, n)\nNameError: name 'getMin' is not defined\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO"
    },
    {
        "stdout": "",
        "stderr": "  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM.py\", line 59\n    F[i][j] += (tik * tkj - T[i][k] * T\n               ^\nSyntaxError: '(' was never closed\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_PAIRS_DIFFERENCE_EQUAL_K"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS.py\", line 76, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS.py\", line 34, in f_filled\n    diag2_left += mat[j][i]\nNameError: name 'j' is not defined\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "CALCULATE_VOLUME_DODECAHEDRON"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT.py\", line 74, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT.py\", line 50, in f_filled\n    group += int(num[i - 1]) - ord('0') * 10\nValueError: invalid literal for int() with base 10: 'Y'\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/GNOME_SORT_A_STUPID_ONE.py\", line 59, in <module>\n    if set([filledres,goldres]) <= set([float(\"inf\"),sys.maxsize,2147483647]) or set([filledres,goldres]) <= set([float(\"-inf\"),-sys.maxsize-1,-sys.maxsize,-2147483648]):\nTypeError: unhashable type: 'list'\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "GNOME_SORT_A_STUPID_ONE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_VALID_SEQUENCE_DIVISIBLE_M_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "TRIANGULAR_MATCHSTICK_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CEILING_IN_A_SORTED_ARRAY_1"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PRODUCT.py\", line 44, in <module>\n    filledres = f_filled(*parameters_set)\nTypeError: f_filled() takes 4 positional arguments but 5 were given\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PRODUCT"
    },
    {
        "stdout": "#Results: 4, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_CHANGES_ALLOWED.py\", line 53, in <module>\n    filledres = f_filled(*parameters_set)\nTypeError: f_filled() takes 5 positional arguments but 6 were given\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_CHANGES_ALLOWED"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "TURN_OFF_THE_RIGHTMOST_SET_BIT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_SET_BITS_IN_AN_INTEGER_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SUM_SERIES_12_32_52_2N_12"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MINIMUM_PERIMETER_N_BLOCKS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH_A_GIVEN_SUM_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_REPETITIVE_ELEMENT_1_N_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1"
    },
    {
        "stdout": "#Results: 1, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CASSINIS_IDENTITY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FINDING_POWER_PRIME_NUMBER_P_N_1"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_LEAST_K_TIMES"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "NUMBER_DIGITS_PRODUCT_TWO_NUMBERS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_CALCULATE_VOLUME_ELLIPSOID"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM.py\", line 72, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM.py\", line 38, in f_filled\n    dec[0] = inc[0] = arr[0]\nIndexError: list assignment index out of range\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM"
    },
    {
        "stdout": "No subarray found\nNo subarray found\nNo subarray found\nNo subarray found\nNo subarray found\nNo subarray found\nNo subarray found\nNo subarray found\nNo subarray found\nNo subarray found\nNo subarray found\nNo subarray found\nSum found between indexes 1 and 1\nSum found between\nindexes 1 and 1\nNo subarray found\nNo subarray found\nNo subarray found\nNo subarray found\nNo subarray found\nNo subarray found\n#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_SUBARRAY_WITH_GIVEN_SUM"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERATOR_RUSSIAN_PEASANTS_ALGORITHM"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SUM_DIVISORS_1_N_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SUM_FACTORS_NUMBER"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASING_AND_THEN_DECREASING"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "HARDY_RAMANUJAN_THEOREM"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "STEINS_ALGORITHM_FOR_FINDING_GCD"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/CAESAR_CIPHER.py\", line 49, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/CAESAR_CIPHER.py\", line 25, in f_filled\n    ch = chr ( ord ( text [ i ] ) + s - 65 ) % 26 + 65\nTypeError: not all arguments converted during string formatting\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "CAESAR_CIPHER"
    },
    {
        "stdout": "#Results: 9, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MINIMUM_INSERTIONS_SORT_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_YY_N_2"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/PROGRAM_DECIMAL_BINARY_CONVERSION_2.py\", line 49, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/PROGRAM_DECIMAL_BINARY_CONVERSION_2.py\", line 27, in f_filled\n    B_Number += rem * 10 ** cnt\nOverflowError: int too large to convert to float\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "PROGRAM_DECIMAL_BINARY_CONVERSION_2"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY"
    },
    {
        "stdout": "[' ', 'A', 'B', 'C', 'E', 'I', 'J', 'K', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'W', 'a', 'b', 'd', 'e', 'g', 'h', 'l', 'm', 'n', 'o', 'p', 'q', 't', 'u', 'w', 'x', 'y', 'z']\n['6', '9', '6', '7', '3', '1', '3', '1', '6', '0', '2', '5', '6', '5', '1', '5', '7', '2', '8', '4', '2', '8', '0', '1', '5', '4', '3', '6', '0', '7', '6', '1', '9', '6', '0', '8', '9', '1', '3', '8']\n['0']\n['f', 'V', 'u', 'B', 'i', 'f', 'j', 'Z', 'Q', 'r', ' ', 'H', 't', 'g', 'K', 'Y', 'O', 'r', 'c', 'm', 'D', 'c', 'g', 'W', 'm', 'F']\n['0', '1', '2', '4', '5', '6', '7', '8']\n['1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1']\n[' ', 'B', 'E', 'G', 'H', 'J', 'M', 'N', 'O', 'P', 'Q', 'S', 'U', 'W', 'Y', 'a', 'c', 'd', 'f', 'h', 'i', 'k', 'l', 'm', 'p', 's', 't', 'v', 'y', 'z']\n['8', '6', '9', '8', '0', '6', '8', '0', '5', '4', '1', '2', '8', '7', '9', '2', '4', '8', '0', '6', '1', '9', '6', '4', '6', '7', '4', '2', '6', '8', '1', '5', '8', '6']\n['0', '1']\n[' ', 'z', 'f', 'F', 'V', ' ', 'C', 'S', 'L', 'f', 'n', 'S', 's', 'd', 'N', 'A', 'r', 's', ' ', 'u', 'k', 'l', 'b', 'f', 'p', 'O', 't']\n#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "REMOVE_CONSECUTIVE_DUPLICATES_STRING"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "BINARY_SEARCH"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "MULTIPLY_AN_INTEGER_WITH_3_5"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "HORNERS_METHOD_POLYNOMIAL_EVALUATION"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_GIVEN_STRING_ROTATION_PALINDROME"
    },
    {
        "stdout": "number is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\nnumber is not present!\n#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACENT_ELEMENTS_IS_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SORT_ARRAY_WAVE_FORM_2_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "TEMPLE_OFFERINGS"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "STACK_SET_3_REVERSE_STRING_USING_STACK"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_SET_BITS_IN_AN_INTEGER_2"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "DIVISIBILITY_9_USING_BITWISE_OPERATORS"
    },
    {
        "stdout": "#Results: 7, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S"
    },
    {
        "stdout": "#Results: 9, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD_1"
    },
    {
        "stdout": "#Results: 6, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "QUICK_WAY_CHECK_CHARACTERS_STRING"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_SET_BITS_IN_AN_INTEGER_3"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "LEXICOGRAPHICALLY_NEXT_STRING"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ"
    },
    {
        "stdout": "#Results: 2, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "STEINS_ALGORITHM_FOR_FINDING_GCD_1"
    },
    {
        "stdout": "#Results: 2, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE"
    },
    {
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1.py\", line 57, in <module>\n    filledres = f_filled(*parameters_set)\n  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1.py\", line 38, in f_filled\n    return \"\".join(result)\nTypeError: sequence item 0: expected str instance, NoneType found\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1"
    },
    {
        "stdout": "#Results: 0, 10\n",
        "stderr": "",
        "state": "ComputeError",
        "WhyError": "ComputeError_",
        "filename": "SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIBONACCI_MODULO_P"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE"
    },
    {
        "stdout": "",
        "stderr": "  File \"/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/COUNT_PALINDROME_SUB_STRINGS_STRING.py\", line 48\n    dp[i][j] = dp[i][j - 1] + dp[i + 1\n                                ^\nSyntaxError: '[' was never closed\n",
        "state": "CompileError",
        "WhyError": "CompileError_",
        "filename": "COUNT_PALINDROME_SUB_STRINGS_STRING"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE.py:18: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\n  if count % 2 is not 0 :\n/data/oyj/cstproject/result2/translate/starchat/java2python/python_remake_eval/FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE.py:25: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\n  if count % 2 is not 0 :\n",
        "state": "Correct",
        "WhyError": "",
        "filename": "FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINATION"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MINIMUM_ROTATIONS_REQUIRED_GET_STRING"
    },
    {
        "stdout": "#Results: 10, 10\n",
        "stderr": "",
        "state": "Correct",
        "WhyError": "",
        "filename": "MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY"
    }
]