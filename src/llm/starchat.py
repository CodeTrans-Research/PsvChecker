import os
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).resolve().parent.parent))
from lang_processer.parser import JavaParser,PythonParser,CPPParser
from common.traverse import findTokenWithType
import torch
from transformers import pipeline
import json

def translate(fr,to,code,pp):
    prompt = f'''
    {fr} Code:
    {code}

    Translate the above {fr} code to {to}.

    {to} Code:
    '''
    prefix_token = "<fim_prefix>"
    suffix_token = "<fim_suffix><fim_middle>"
    prompt = prefix_token + prompt + suffix_token
    res = pp(prompt, max_new_tokens=512, do_sample=True, temperature=0.2, top_k=50, top_p=0.95, eos_token_id=49155)
    ans = res[0]['generated_text'].split(suffix_token)[1]
    return ans

def translateFiles(fr,to,pp):
    frpath = f"dataset/{fr}2{to}/{fr}"  
    topath = f"result/translate/starchat/{fr}2{to}/{to}_txt"
    todoset = set()
    cnt = 0
    extdic = {"java":".java","python":".py","c++":".cpp"}
    for _,_,fs in os.walk(frpath):
        for f in fs:
            filename,_ = os.path.splitext(f)
            todoset.add(filename)
            if filename in todoset:
                code = open(os.path.join(frpath,f),"r").read()
                trcode = translate(fr,to,code,pp)
                tofile = os.path.join(topath,filename+extdic[to])
                open(tofile,"w").write(trcode)
                cnt += 1
                print(f"{cnt}-{f}-Translate file:{tofile}")
def filterCode(lang):
    # filter out the literal text generated by model to get pure code
    parserclass = None
    if lang == "java":
        frpath = f"result/translate/starchat/python2java/java_txt"
        topath = f"result/translate/starchat/python2java/java"
        parserclass = JavaParser
    elif lang == "python":
        frpath = f"result/translate/starchat/java2python/python_txt"
        topath = f"result/translate/starchat/java2python/python"
        parserclass = PythonParser
    elif lang == "c++":
        frpath = f"result/translate/starchat/java2cpp/cpp_txt"
        topath = f"result/translate/starchat/java2cpp/cpp"
        parserclass = CPPParser
    cnt = 0
    for _ , _ ,fs in os.walk(frpath):
        for f in fs:
            code = open(os.path.join(frpath,f)).read()
            if lang == "java":
                fakecode = f"class tmp{{{code}}}"
                code = fakecode
            p = parserclass(code)
            funcs = []
            findTokenWithType(p.code,p.tree.root_node,funcs,["function_definition","method_declaration"])
            #print(funcs)
            newcode = ""
            if len(funcs) > 0:
                newcode = funcs[0]
            if newcode == "":
                newcode = code
                print(os.path.join(frpath,f))
            open(os.path.join(topath,f),"w").write(newcode)
            cnt += 1
            print(cnt)
            
           
    
if __name__ == "__main__":
    #pipe = pipeline("text-generation", model="/starchat-beta", torch_dtype=torch.bfloat16, device=-1)
    #pipe = pipeline("text-generation", model="/starchat-beta", torch_dtype=torch.bfloat16, device_map = "auto")
    #translateFiles("java","c++",pipe)
    #translateFiles("java","python",pipe)
    #translateFiles("python","java",pipe)
    #filterCode("java")
    #filterCode("python")
    #filterCode("c++")